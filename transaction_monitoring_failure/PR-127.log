Pull request #127 opened
Connecting to https://api.github.com using ccycloud-jx/******
Obtained Jenkinsfile from 6b8b8c4a3704a6dc8ef79872ef127fc2c83df8e9
Running in Durability level: MAX_SURVIVABILITY
[Pipeline] Start of Pipeline
[Pipeline] node
Still waiting to schedule task
‘maven-java11-4tx4t’ is offline
Agent maven-java11-4tx4t is provisioned from template Kubernetes Pod Template
---
apiVersion: "v1"
kind: "Pod"
metadata:
  annotations: {}
  labels:
    jenkins: "slave"
    jenkins/jenkins-maven-java11: "true"
  name: "maven-java11-4tx4t"
spec:
  containers:
  - args:
    - "cat"
    command:
    - "/bin/sh"
    - "-c"
    env:
    - name: "MAVEN_OPTS"
      value: "-Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn"
    - name: "DOCKER_CONFIG"
      value: "/home/jenkins/.docker/"
    - name: "GIT_AUTHOR_EMAIL"
      value: "jenkins-x@googlegroups.com"
    - name: "GIT_COMMITTER_EMAIL"
      value: "jenkins-x@googlegroups.com"
    - name: "GIT_COMMITTER_NAME"
      value: "jenkins-x-bot"
    - name: "_JAVA_OPTIONS"
      value: "-XX:+UnlockExperimentalVMOptions -Dsun.zip.disableMemoryMapping=true\
        \ -XX:+UseParallelGC -XX:MinHeapFreeRatio=5 -XX:MaxHeapFreeRatio=10 -XX:GCTimeRatio=4\
        \ -XX:AdaptiveSizePolicyWeight=90 -Xms10m -Xmx192m"
    - name: "GIT_AUTHOR_NAME"
      value: "jenkins-x-bot"
    - name: "XDG_CONFIG_HOME"
      value: "/home/jenkins"
    - name: "JENKINS_URL"
      value: "http://jenkins:8080"
    image: "gcr.io/jenkinsxio/builder-maven-java11:0.1.706"
    imagePullPolicy: "IfNotPresent"
    name: "maven"
    resources:
      limits:
        memory: "1024Mi"
        cpu: "1"
      requests:
        memory: "512Mi"
        cpu: "400m"
    securityContext:
      privileged: true
    tty: true
    volumeMounts:
    - mountPath: "/home/jenkins/.docker"
      name: "volume-2"
      readOnly: false
    - mountPath: "/root/.m2"
      name: "volume-1"
      readOnly: false
    - mountPath: "/var/run/docker.sock"
      name: "volume-0"
      readOnly: false
    - mountPath: "/home/jenkins/.gnupg"
      name: "volume-3"
      readOnly: false
    - mountPath: "/home/jenkins/agent"
      name: "workspace-volume"
      readOnly: false
    workingDir: "/home/jenkins/agent"
  - args:
    - "********"
    - "maven-java11-4tx4t"
    env:
    - name: "JENKINS_SECRET"
      value: "********"
    - name: "JENKINS_TUNNEL"
      value: "jenkins-agent:50000"
    - name: "GIT_AUTHOR_EMAIL"
      value: "jenkins-x@googlegroups.com"
    - name: "GIT_COMMITTER_NAME"
      value: "jenkins-x-bot"
    - name: "GIT_AUTHOR_NAME"
      value: "jenkins-x-bot"
    - name: "JENKINS_AGENT_WORKDIR"
      value: "/home/jenkins/agent"
    - name: "XDG_CONFIG_HOME"
      value: "/home/jenkins"
    - name: "MAVEN_OPTS"
      value: "-Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn"
    - name: "DOCKER_CONFIG"
      value: "/home/jenkins/.docker/"
    - name: "JENKINS_AGENT_NAME"
      value: "maven-java11-4tx4t"
    - name: "GIT_COMMITTER_EMAIL"
      value: "jenkins-x@googlegroups.com"
    - name: "_JAVA_OPTIONS"
      value: "-XX:+UnlockExperimentalVMOptions -Dsun.zip.disableMemoryMapping=true\
        \ -XX:+UseParallelGC -XX:MinHeapFreeRatio=5 -XX:MaxHeapFreeRatio=10 -XX:GCTimeRatio=4\
        \ -XX:AdaptiveSizePolicyWeight=90 -Xms10m -Xmx192m"
    - name: "JENKINS_NAME"
      value: "maven-java11-4tx4t"
    - name: "JENKINS_URL"
      value: "http://jenkins:8080"
    image: "jenkinsci/jnlp-slave:3.26-1-alpine"
    imagePullPolicy: "IfNotPresent"
    name: "jnlp"
    resources:
      limits: {}
      requests:
        memory: "128Mi"
        cpu: "100m"
    securityContext:
      privileged: false
    tty: false
    volumeMounts:
    - mountPath: "/home/jenkins/.docker"
      name: "volume-2"
      readOnly: false
    - mountPath: "/root/.m2"
      name: "volume-1"
      readOnly: false
    - mountPath: "/var/run/docker.sock"
      name: "volume-0"
      readOnly: false
    - mountPath: "/home/jenkins/.gnupg"
      name: "volume-3"
      readOnly: false
    - mountPath: "/home/jenkins/agent"
      name: "workspace-volume"
      readOnly: false
    workingDir: "/home/jenkins/agent"
  nodeSelector: {}
  restartPolicy: "Never"
  serviceAccount: "jenkins"
  volumes:
  - hostPath:
      path: "/var/run/docker.sock"
    name: "volume-0"
  - name: "volume-2"
    secret:
      secretName: "jenkins-docker-cfg"
  - name: "volume-1"
    secret:
      secretName: "jenkins-maven-settings"
  - emptyDir: {}
    name: "workspace-volume"
  - name: "volume-3"
    secret:
      secretName: "jenkins-release-gpg"

Running on maven-java11-4tx4t in /home/jenkins/agent/workspace/loud_payment-provider-lhv_PR-127
[Pipeline] {
[Pipeline] stage
[Pipeline] { (Declarative: Checkout SCM)
[Pipeline] checkout
using credential https://github.com
Cloning the remote Git repository
Cloning with configured refspecs honoured and without tags
Cloning repository https://github.com/ccycloud/payment-provider-lhv.git
 > git init /home/jenkins/agent/workspace/loud_payment-provider-lhv_PR-127 # timeout=10
Fetching upstream changes from https://github.com/ccycloud/payment-provider-lhv.git
 > git --version # timeout=10
using GIT_ASKPASS to set credentials 
 > git fetch --no-tags --progress https://github.com/ccycloud/payment-provider-lhv.git +refs/pull/127/head:refs/remotes/origin/PR-127
Fetching without tags
 > git config remote.origin.url https://github.com/ccycloud/payment-provider-lhv.git # timeout=10
 > git config --add remote.origin.fetch +refs/pull/127/head:refs/remotes/origin/PR-127 # timeout=10
 > git config remote.origin.url https://github.com/ccycloud/payment-provider-lhv.git # timeout=10
Fetching upstream changes from https://github.com/ccycloud/payment-provider-lhv.git
using GIT_ASKPASS to set credentials 
 > git fetch --no-tags --progress https://github.com/ccycloud/payment-provider-lhv.git +refs/pull/127/head:refs/remotes/origin/PR-127
Checking out Revision 6b8b8c4a3704a6dc8ef79872ef127fc2c83df8e9 (PR-127)
 > git config core.sparsecheckout # timeout=10
 > git checkout -f 6b8b8c4a3704a6dc8ef79872ef127fc2c83df8e9
Commit message: "test string added"
First time build. Skipping changelog.
[Pipeline] }
[Pipeline] // stage
[Pipeline] withEnv
[Pipeline] {
[Pipeline] withCredentials
Masking only exact matches of $CHARTMUSEUM_CREDS or $CHARTMUSEUM_CREDS_USR or $CHARTMUSEUM_CREDS_PSW
[Pipeline] {
[Pipeline] withEnv
[Pipeline] {
[Pipeline] stage
[Pipeline] { (CI Build and push snapshot)
[Pipeline] withEnv
[Pipeline] {
[Pipeline] container
[Pipeline] {
[Pipeline] sh
+ mvn -s settings.xml install -P bdd
Picked up _JAVA_OPTIONS: -XX:+UnlockExperimentalVMOptions -Dsun.zip.disableMemoryMapping=true -XX:+UseParallelGC -XX:MinHeapFreeRatio=5 -XX:MaxHeapFreeRatio=10 -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90 -Xms10m -Xmx192m
[INFO] Scanning for projects...
[WARNING] 
[WARNING] Some problems were encountered while building the effective model for com.currencycloud.providers.lhv:application:jar:1.0.0-SNAPSHOT
[WARNING] 'build.plugins.plugin.version' for org.springframework.boot:spring-boot-maven-plugin is missing. @ com.currencycloud.providers.lhv:application:[unknown-version], /home/jenkins/agent/workspace/loud_payment-provider-lhv_PR-127/application/pom.xml, line 184, column 15
[WARNING] 
[WARNING] Some problems were encountered while building the effective model for com.currencycloud.providers.lhv:bdd:jar:1.0.0-SNAPSHOT
[WARNING] The expression ${build.directory} is deprecated. Please use ${project.build.directory} instead.
[WARNING] 
[WARNING] It is highly recommended to fix these problems because they threaten the stability of your build.
[WARNING] 
[WARNING] For this reason, future Maven versions might no longer support building such malformed projects.
[WARNING] 
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Build Order:
[INFO] 
[INFO] Payment Provider LHV                                               [pom]
[INFO] LHV Provider                                                       [jar]
[INFO] wiremock                                                           [jar]
[INFO] Behaviour Driven Design Tests                                      [jar]
[INFO] 
[INFO] ------------------< com.currencycloud.providers:lhv >-------------------
[INFO] Building Payment Provider LHV 1.0.0-SNAPSHOT                       [1/4]
[INFO] --------------------------------[ pom ]---------------------------------
[INFO] 
[INFO] --- maven-install-plugin:2.4:install (default-install) @ lhv ---
[INFO] Installing /home/jenkins/agent/workspace/loud_payment-provider-lhv_PR-127/pom.xml to /root/.mvnrepository/com/currencycloud/providers/lhv/1.0.0-SNAPSHOT/lhv-1.0.0-SNAPSHOT.pom
[INFO] 
[INFO] ------------< com.currencycloud.providers.lhv:application >-------------
[INFO] Building LHV Provider 1.0.0-SNAPSHOT                               [2/4]
[INFO] --------------------------------[ jar ]---------------------------------
[INFO] 
[INFO] --- maven-checkstyle-plugin:3.1.1:check (validate) @ application ---
[INFO] Starting audit...
Audit done.
[INFO] You have 0 Checkstyle violations.
[INFO] 
[INFO] --- jacoco-maven-plugin:0.8.5:prepare-agent (default) @ application ---
[INFO] argLine set to -javaagent:/root/.mvnrepository/org/jacoco/org.jacoco.agent/0.8.5/org.jacoco.agent-0.8.5-runtime.jar=destfile=/home/jenkins/agent/workspace/loud_payment-provider-lhv_PR-127/application/target/jacoco.exec
[INFO] 
[INFO] --- enunciate-maven-plugin:2.12.1:docs (default) @ application ---
[INFO] [ENUNCIATE] Using enunciate configuration at /home/jenkins/agent/workspace/loud_payment-provider-lhv_PR-127/application/enunciate.xml
[INFO] [ENUNCIATE] Enabled modules: [docs, jackson, java-xml-client, javascript-client, ruby-json-client, spring-web, swagger]
[INFO] [ENUNCIATE] No JAXB XML data types: Java XML client will not be generated.
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ application ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 9 resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.1:compile (default-compile) @ application ---
[INFO] Changes detected - recompiling the module!
[INFO] Compiling 42 source files to /home/jenkins/agent/workspace/loud_payment-provider-lhv_PR-127/application/target/classes
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ application ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /home/jenkins/agent/workspace/loud_payment-provider-lhv_PR-127/application/src/test/resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.1:testCompile (default-testCompile) @ application ---
[INFO] Changes detected - recompiling the module!
[INFO] Compiling 26 source files to /home/jenkins/agent/workspace/loud_payment-provider-lhv_PR-127/application/target/test-classes
[INFO] /home/jenkins/agent/workspace/loud_payment-provider-lhv_PR-127/application/src/test/java/com/currencycloud/lhv/service/batch/converter/LHVTransactionConverterTest.java: /home/jenkins/agent/workspace/loud_payment-provider-lhv_PR-127/application/src/test/java/com/currencycloud/lhv/service/batch/converter/LHVTransactionConverterTest.java uses unchecked or unsafe operations.
[INFO] /home/jenkins/agent/workspace/loud_payment-provider-lhv_PR-127/application/src/test/java/com/currencycloud/lhv/service/batch/converter/LHVTransactionConverterTest.java: Recompile with -Xlint:unchecked for details.
[INFO] 
[INFO] --- maven-surefire-plugin:3.0.0-M4:test (default-test) @ application ---
[INFO] 
[INFO] -------------------------------------------------------
[INFO]  T E S T S
[INFO] -------------------------------------------------------
[INFO] Running com.currencycloud.lhv.spring.config.ApplicationTest
SLF4J: Class path contains multiple SLF4J bindings.
SLF4J: Found binding in [jar:file:/root/.mvnrepository/org/spf4j/spf4j-slf4j-test/8.8.1/spf4j-slf4j-test-8.8.1.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: Found binding in [jar:file:/root/.mvnrepository/org/apache/logging/log4j/log4j-slf4j-impl/2.13.3/log4j-slf4j-impl-2.13.3.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J: Actual binding is of type [org.spf4j.test.log.TestLoggers]
2020-08-06T10:15:40.383Z INFO c.c.l.s.c.Application "main" "Configured batch size is 10" 
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 3.901 s - in com.currencycloud.lhv.spring.config.ApplicationTest
[INFO] Running com.currencycloud.lhv.spring.config.WebConfigTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.305 s - in com.currencycloud.lhv.spring.config.WebConfigTest
[INFO] Running com.currencycloud.lhv.spring.config.ApplicationConfigurerTest
[INFO] Tests run: 12, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.196 s - in com.currencycloud.lhv.spring.config.ApplicationConfigurerTest
[INFO] Running com.currencycloud.lhv.spring.config.RabbitConfigTest
[INFO] Tests run: 7, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.211 s - in com.currencycloud.lhv.spring.config.RabbitConfigTest
[INFO] Running com.currencycloud.lhv.spring.config.HTTPConfigTest
SLF4J: Class path contains multiple SLF4J bindings.
SLF4J: Found binding in [jar:file:/root/.mvnrepository/org/spf4j/spf4j-slf4j-test/8.8.1/spf4j-slf4j-test-8.8.1.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: Found binding in [jar:file:/root/.mvnrepository/org/apache/logging/log4j/log4j-slf4j-impl/2.13.3/log4j-slf4j-impl-2.13.3.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J: Actual binding is of type [org.spf4j.test.log.TestLoggers]
2020-08-06T10:15:46.866Z INFO c.c.l.s.c.HTTPConfig "main" "Using base URL: http://someurl.test" 
[INFO] Tests run: 11, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 9.105 s - in com.currencycloud.lhv.spring.config.HTTPConfigTest
[INFO] Running com.currencycloud.lhv.http.controller.StatusControllerTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.061 s - in com.currencycloud.lhv.http.controller.StatusControllerTest
[INFO] Running com.currencycloud.lhv.http.controller.PaymentSubmissionsControllerTest
2020-08-06T10:15:50.762Z INFO c.c.l.h.c.PaymentSubmissionsController "main" "Batching 3 batches of 3400 payments" 
2020-08-06T10:15:50.764Z ERROR c.c.l.h.c.PaymentSubmissionsController "main" "Could not batch payments" 
com.currencycloud.lhv.service.batch.BatchException:something went wrong
	at c.c.l.h.c.PaymentSubmissionsController.batch(PaymentSubmissionsController.java:142)[classes/]
	at ^.submit(^:97)[^]
	at c.c.l.h.c.PaymentSubmissionsControllerTest.submit_batchingFailed_returnsFailureMessageAndStatus(PaymentSubmissionsControllerTest.java:130)[test-classes/]
	at o.j.r.m.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)[junit-4.13.jar:4.13]
	at o.j.i.r.m.ReflectiveCallable.run(ReflectiveCallable.java:12)[^]
	at o.j.r.m.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)[^]
	at o.j.i.r.s.InvokeMethod.evaluate(InvokeMethod.java:17)[^]
	at o.j.i.r.s.RunBefores.evaluate(RunBefores.java:26)[^]
	at o.m.i.r.DefaultInternalRunner$1$1.evaluate(DefaultInternalRunner.java:44)[mockito-core-2.28.2.jar]
	at o.j.r.ParentRunner$3.evaluate(ParentRunner.java:306)[junit-4.13.jar:4.13]
	at o.j.r.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)[^]
	at o.j.r.ParentRunner.runLeaf(ParentRunner.java:366)[^]
	at o.j.r.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)[^]
	at ^.runChild(^:63)[^]
	at o.j.r.ParentRunner$4.run(ParentRunner.java:331)[^]
	at o.j.r.ParentRunner$1.schedule(^:79)[^]
	at o.j.r.ParentRunner.runChildren(^:329)[^]
	at ^.access$100(^:66)[^]
	at o.j.r.ParentRunner$2.evaluate(^:293)[^]
	at o.j.r.ParentRunner$3.evaluate(^:306)[^]
	at o.j.r.ParentRunner.run(^:413)[^]
	at o.m.i.r.DefaultInternalRunner$1.run(DefaultInternalRunner.java:74)[mockito-core-2.28.2.jar]
	at o.m.i.r.DefaultInternalRunner.run(^:80)[^]
	at o.m.i.r.StrictRunner.run(StrictRunner.java:39)[^]
	at o.m.j.MockitoJUnitRunner.run(MockitoJUnitRunner.java:163)[^]
	at o.j.r.JUnitCore.run(JUnitCore.java:137)[junit-4.13.jar:4.13]
	at ^.run(^:115)[^]
	at o.j.v.e.e.RunnerExecutor.execute(RunnerExecutor.java:43)[junit-vintage-engine-5.6.2.jar:5.6.2]
	at j.u.s.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
	at j.u.s.ReferencePipeline$3$1.accept(ReferencePipeline.java:195)[^]
	at j.u.Iterator.forEachRemaining(Iterator.java:133)[^]
	at j.u.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)[^]
	at j.u.s.AbstractPipeline.copyInto(AbstractPipeline.java:484)[^]
	at ^.wrapAndCopyInto(^:474)[^]
	at j.u.s.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)[^]
	at j.u.s.ForEachOps$ForEachOp$OfRef.evaluateSequential(^:173)[^]
	at j.u.s.AbstractPipeline.evaluate(AbstractPipeline.java:234)[^]
	at j.u.s.ReferencePipeline.forEach(ReferencePipeline.java:497)[^]
	at o.j.v.e.VintageTestEngine.executeAllChildren(VintageTestEngine.java:82)[junit-vintage-engine-5.6.2.jar:5.6.2]
	at ^.execute(^:73)[^]
	at o.j.p.l.c.DefaultLauncher.execute(DefaultLauncher.java:248)[junit-platform-launcher-1.6.2.jar:1.6.2]
	at ^.lambda$execute$5(^:211)[^]
	at ^.withInterceptedStreams(^:226)[^]
	at ^.execute(^:199)[^]
	at ^.execute(^:132)[^]
	at o.a.m.s.j.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:154)[surefire-junit-platform-3.0.0-M4.jar:3.0.0-M4]
	at ^.invoke(^:127)[^]
	at o.a.m.s.b.ForkedBooter.runSuitesInProcess(ForkedBooter.java:377)[surefire-booter-3.0.0-M4.jar:3.0.0-M4]
	at ^.execute(^:138)[^]
	at ^.run(^:465)[^]
	at ^.main(^:451)[^]
2020-08-06T10:15:50.867Z INFO c.c.l.h.c.PaymentSubmissionsController "main" "Batching 3 batches of 3400 payments" 
2020-08-06T10:15:50.885Z INFO c.c.l.h.c.PaymentSubmissionsController "main" "Batching 0 batches of 0 payments" 
2020-08-06T10:15:50.983Z INFO c.c.l.h.c.PaymentSubmissionsController "main" "Batching 3 batches of 3400 payments" 
2020-08-06T10:15:50.984Z ERROR c.c.l.h.c.PaymentSubmissionsController "main" "Could not batch all payments." 
com.currencycloud.lhv.service.batch.PartiallyCompleteException:Batch jobs partially completed. Planned 10, Completed 5 - Cause: something went wrong
	at c.c.l.h.c.PaymentSubmissionsController.batch(PaymentSubmissionsController.java:142)[classes/]
	at ^.submit(^:97)[^]
	at c.c.l.h.c.PaymentSubmissionsControllerTest.submit_batchingPartiallyComplete_returnsPartiallyCompleteMessageAndStatus(PaymentSubmissionsControllerTest.java:142)[test-classes/]
	at o.j.r.m.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)[junit-4.13.jar:4.13]
	at o.j.i.r.m.ReflectiveCallable.run(ReflectiveCallable.java:12)[^]
	at o.j.r.m.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)[^]
	at o.j.i.r.s.InvokeMethod.evaluate(InvokeMethod.java:17)[^]
	at o.j.i.r.s.RunBefores.evaluate(RunBefores.java:26)[^]
	at o.m.i.r.DefaultInternalRunner$1$1.evaluate(DefaultInternalRunner.java:44)[mockito-core-2.28.2.jar]
	at o.j.r.ParentRunner$3.evaluate(ParentRunner.java:306)[junit-4.13.jar:4.13]
	at o.j.r.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)[^]
	at o.j.r.ParentRunner.runLeaf(ParentRunner.java:366)[^]
	at o.j.r.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)[^]
	at ^.runChild(^:63)[^]
	at o.j.r.ParentRunner$4.run(ParentRunner.java:331)[^]
	at o.j.r.ParentRunner$1.schedule(^:79)[^]
	at o.j.r.ParentRunner.runChildren(^:329)[^]
	at ^.access$100(^:66)[^]
	at o.j.r.ParentRunner$2.evaluate(^:293)[^]
	at o.j.r.ParentRunner$3.evaluate(^:306)[^]
	at o.j.r.ParentRunner.run(^:413)[^]
	at o.m.i.r.DefaultInternalRunner$1.run(DefaultInternalRunner.java:74)[mockito-core-2.28.2.jar]
	at o.m.i.r.DefaultInternalRunner.run(^:80)[^]
	at o.m.i.r.StrictRunner.run(StrictRunner.java:39)[^]
	at o.m.j.MockitoJUnitRunner.run(MockitoJUnitRunner.java:163)[^]
	at o.j.r.JUnitCore.run(JUnitCore.java:137)[junit-4.13.jar:4.13]
	at ^.run(^:115)[^]
	at o.j.v.e.e.RunnerExecutor.execute(RunnerExecutor.java:43)[junit-vintage-engine-5.6.2.jar:5.6.2]
	at j.u.s.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
	at j.u.s.ReferencePipeline$3$1.accept(ReferencePipeline.java:195)[^]
	at j.u.Iterator.forEachRemaining(Iterator.java:133)[^]
	at j.u.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)[^]
	at j.u.s.AbstractPipeline.copyInto(AbstractPipeline.java:484)[^]
	at ^.wrapAndCopyInto(^:474)[^]
	at j.u.s.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)[^]
	at j.u.s.ForEachOps$ForEachOp$OfRef.evaluateSequential(^:173)[^]
	at j.u.s.AbstractPipeline.evaluate(AbstractPipeline.java:234)[^]
	at j.u.s.ReferencePipeline.forEach(ReferencePipeline.java:497)[^]
	at o.j.v.e.VintageTestEngine.executeAllChildren(VintageTestEngine.java:82)[junit-vintage-engine-5.6.2.jar:5.6.2]
	at ^.execute(^:73)[^]
	at o.j.p.l.c.DefaultLauncher.execute(DefaultLauncher.java:248)[junit-platform-launcher-1.6.2.jar:1.6.2]
	at ^.lambda$execute$5(^:211)[^]
	at ^.withInterceptedStreams(^:226)[^]
	at ^.execute(^:199)[^]
	at ^.execute(^:132)[^]
	at o.a.m.s.j.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:154)[surefire-junit-platform-3.0.0-M4.jar:3.0.0-M4]
	at ^.invoke(^:127)[^]
	at o.a.m.s.b.ForkedBooter.runSuitesInProcess(ForkedBooter.java:377)[surefire-booter-3.0.0-M4.jar:3.0.0-M4]
	at ^.execute(^:138)[^]
	at ^.run(^:465)[^]
	at ^.main(^:451)[^]
2020-08-06T10:15:50.988Z INFO c.c.l.h.c.PaymentSubmissionsController "main" "Batching 3 batches of 32 payments" 
2020-08-06T10:15:50.993Z INFO c.c.l.h.c.PaymentSubmissionsController "main" "Batching 6 batches of 5055 payments" 
[INFO] Tests run: 16, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.602 s - in com.currencycloud.lhv.http.controller.PaymentSubmissionsControllerTest
[INFO] Running com.currencycloud.lhv.http.logging.HTTPLoggerTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.11 s - in com.currencycloud.lhv.http.logging.HTTPLoggerTest
[INFO] Running com.currencycloud.lhv.http.dto.StatusDtoTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 s - in com.currencycloud.lhv.http.dto.StatusDtoTest
[INFO] Running com.currencycloud.lhv.service.batch.LHVBatchWriterTest
2020-08-06T10:15:51.781Z INFO c.c.l.s.b.LHVBatchWriter "main" "Payments submitted" 
2020-08-06T10:15:51.791Z INFO c.c.l.s.b.LHVBatchWriter "main" "Payments submitted" 
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.599 s - in com.currencycloud.lhv.service.batch.LHVBatchWriterTest
[INFO] Running com.currencycloud.lhv.service.batch.converter.LHVTransactionConverterTest
140
[INFO] Tests run: 15, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.694 s - in com.currencycloud.lhv.service.batch.converter.LHVTransactionConverterTest
[INFO] Running com.currencycloud.lhv.service.batch.LHVBatchProcessorTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.304 s - in com.currencycloud.lhv.service.batch.LHVBatchProcessorTest
[INFO] Running com.currencycloud.lhv.service.batch.LHVBatchReaderTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.495 s - in com.currencycloud.lhv.service.batch.LHVBatchReaderTest
[INFO] Running com.currencycloud.lhv.service.batch.LimitJobToOneExecutionTest
2020-08-06T10:15:53.580Z INFO c.c.l.s.b.LimitJobToOneExecution "main" "Stopping job" 
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.21 s - in com.currencycloud.lhv.service.batch.LimitJobToOneExecutionTest
[INFO] Running com.currencycloud.lhv.service.batch.BatchExceptionTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 s - in com.currencycloud.lhv.service.batch.BatchExceptionTest
[INFO] Running com.currencycloud.lhv.service.batch.PaymentInstructionInformationBuilderTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.077 s - in com.currencycloud.lhv.service.batch.PaymentInstructionInformationBuilderTest
[INFO] Running com.currencycloud.lhv.service.batch.BatchingServiceImplTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.125 s - in com.currencycloud.lhv.service.batch.BatchingServiceImplTest
[INFO] Running com.currencycloud.lhv.service.batch.PartiallyCompletedExceptionTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 s - in com.currencycloud.lhv.service.batch.PartiallyCompletedExceptionTest
[INFO] Running com.currencycloud.lhv.service.LHVServiceImplTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.469 s - in com.currencycloud.lhv.service.LHVServiceImplTest
[INFO] Running com.currencycloud.lhv.service.LHVServiceExceptionTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.002 s - in com.currencycloud.lhv.service.LHVServiceExceptionTest
[INFO] Running com.currencycloud.lhv.rabbit.payment.dto.PaymentSubmissionValidatorTest
2020-08-06T10:15:55.770Z INFO c.c.l.r.p.d.PaymentSubmissionValidator "main" "Validated [0] with [1] Errors" 
2020-08-06T10:15:55.779Z INFO c.c.l.r.p.d.PaymentSubmissionValidator "main" "Validated [12345.67890] with [1] Errors" 
2020-08-06T10:15:55.782Z INFO c.c.l.r.p.d.PaymentSubmissionValidator "main" "Validated [Twenty] with [1] Errors" 
2020-08-06T10:15:55.785Z INFO c.c.l.r.p.d.PaymentSubmissionValidator "main" "Validated [12345.67890] with [0] Errors" 
2020-08-06T10:15:55.788Z INFO c.c.l.r.p.d.PaymentSubmissionValidator "main" "Validated [12345.67890] with [1] Errors" 
2020-08-06T10:15:55.790Z INFO c.c.l.r.p.d.PaymentSubmissionValidator "main" "Validated [12345.678901234] with [1] Errors" 
2020-08-06T10:15:55.794Z INFO c.c.l.r.p.d.PaymentSubmissionValidator "main" "Validated [12345.67890] with [0] Errors" 
2020-08-06T10:15:55.796Z INFO c.c.l.r.p.d.PaymentSubmissionValidator "main" "Validated [12345.67890] with [1] Errors" 
2020-08-06T10:15:55.799Z INFO c.c.l.r.p.d.PaymentSubmissionValidator "main" "Validated [00.00] with [1] Errors" 
2020-08-06T10:15:55.862Z INFO c.c.l.r.p.d.PaymentSubmissionValidator "main" "Validated [12345.67890] with [1] Errors" 
2020-08-06T10:15:55.865Z INFO c.c.l.r.p.d.PaymentSubmissionValidator "main" "Validated [null] with [9] Errors" 
2020-08-06T10:15:55.868Z INFO c.c.l.r.p.d.PaymentSubmissionValidator "main" "Validated [12345.67890] with [1] Errors" 
2020-08-06T10:15:55.871Z INFO c.c.l.r.p.d.PaymentSubmissionValidator "main" "Validated [12345.67890] with [1] Errors" 
2020-08-06T10:15:55.873Z INFO c.c.l.r.p.d.PaymentSubmissionValidator "main" "Validated [123456789012345678.901] with [1] Errors" 
2020-08-06T10:15:55.876Z INFO c.c.l.r.p.d.PaymentSubmissionValidator "main" "Validated [12345.67890] with [1] Errors" 
2020-08-06T10:15:55.879Z INFO c.c.l.r.p.d.PaymentSubmissionValidator "main" "Validated [12345.67890] with [1] Errors" 
2020-08-06T10:15:55.882Z INFO c.c.l.r.p.d.PaymentSubmissionValidator "main" "Validated [12345.67890] with [0] Errors" 
2020-08-06T10:15:55.885Z INFO c.c.l.r.p.d.PaymentSubmissionValidator "main" "Validated [123456789012345678901] with [1] Errors" 
2020-08-06T10:15:55.888Z INFO c.c.l.r.p.d.PaymentSubmissionValidator "main" "Validated [.123] with [0] Errors" 
2020-08-06T10:15:55.890Z INFO c.c.l.r.p.d.PaymentSubmissionValidator "main" "Validated [12345.67890] with [1] Errors" 
2020-08-06T10:15:55.963Z INFO c.c.l.r.p.d.PaymentSubmissionValidator "main" "Validated [123.456.789.678.8901] with [1] Errors" 
2020-08-06T10:15:55.966Z INFO c.c.l.r.p.d.PaymentSubmissionValidator "main" "Validated [12345.67890] with [1] Errors" 
2020-08-06T10:15:55.968Z INFO c.c.l.r.p.d.PaymentSubmissionValidator "main" "Validated [12345.67890] with [0] Errors" 
2020-08-06T10:15:55.971Z INFO c.c.l.r.p.d.PaymentSubmissionValidator "main" "Validated [901234567.8900000000] with [1] Errors" 
2020-08-06T10:15:55.974Z INFO c.c.l.r.p.d.PaymentSubmissionValidator "main" "Validated [12345.67890] with [1] Errors" 
2020-08-06T10:15:55.976Z INFO c.c.l.r.p.d.PaymentSubmissionValidator "main" "Validated [-200] with [1] Errors" 
[INFO] Tests run: 26, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.71 s - in com.currencycloud.lhv.rabbit.payment.dto.PaymentSubmissionValidatorTest
[INFO] Running com.currencycloud.lhv.rabbit.payment.dto.PaymentSubmissionSanitiserTest
[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 3.674 s - in com.currencycloud.lhv.rabbit.payment.dto.PaymentSubmissionSanitiserTest
[INFO] Running com.currencycloud.lhv.rabbit.payment.PaymentStatusUpdateRabbitTest
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.626 s - in com.currencycloud.lhv.rabbit.payment.PaymentStatusUpdateRabbitTest
[INFO] Running com.currencycloud.lhv.rabbit.payment.PaymentSubmissionRabbitTest
2020-08-06T10:16:00.379Z ERROR c.c.l.r.p.PaymentSubmissionRabbit "main" "record for short_reference [test-1234] doesn't exist" 
2020-08-06T10:16:00.382Z ERROR c.c.l.r.p.PaymentSubmissionRabbit "main" "payment_short_reference is null/empty" 
2020-08-06T10:16:00.383Z ERROR c.c.l.r.p.PaymentSubmissionRabbit "main" "short_reference is null/empty" 
2020-08-06T10:16:00.387Z ERROR c.c.l.r.p.PaymentSubmissionRabbit "main" "Validation has failed for payment_short_reference [test-1234] marked as failed" 
2020-08-06T10:16:00.392Z ERROR c.c.l.r.p.PaymentSubmissionRabbit "main" "record for payment_short_reference [test-1234] exists already" 
2020-08-06T10:16:00.463Z ERROR c.c.l.r.p.PaymentSubmissionRabbit "main" "unexpected error: payment_short_reference [test-1234]" 
javax.validation.ConstraintViolationException
	at c.c.l.r.p.PaymentSubmissionRabbit.submission(PaymentSubmissionRabbit.java:82)[classes/]
	at c.c.l.r.p.PaymentSubmissionRabbitTest.submission_constraintViolationException_logs(PaymentSubmissionRabbitTest.java:149)[test-classes/]
	at o.j.r.m.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)[junit-4.13.jar:4.13]
	at o.j.i.r.m.ReflectiveCallable.run(ReflectiveCallable.java:12)[^]
	at o.j.r.m.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)[^]
	at o.j.i.r.s.InvokeMethod.evaluate(InvokeMethod.java:17)[^]
	at o.j.i.r.s.RunBefores.evaluate(RunBefores.java:26)[^]
	at o.m.i.r.DefaultInternalRunner$1$1.evaluate(DefaultInternalRunner.java:44)[mockito-core-2.28.2.jar]
	at o.j.r.ParentRunner$3.evaluate(ParentRunner.java:306)[junit-4.13.jar:4.13]
	at o.j.r.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)[^]
	at o.j.r.ParentRunner.runLeaf(ParentRunner.java:366)[^]
	at o.j.r.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)[^]
	at ^.runChild(^:63)[^]
	at o.j.r.ParentRunner$4.run(ParentRunner.java:331)[^]
	at o.j.r.ParentRunner$1.schedule(^:79)[^]
	at o.j.r.ParentRunner.runChildren(^:329)[^]
	at ^.access$100(^:66)[^]
	at o.j.r.ParentRunner$2.evaluate(^:293)[^]
	at o.j.r.ParentRunner$3.evaluate(^:306)[^]
	at o.j.r.ParentRunner.run(^:413)[^]
	at o.m.i.r.DefaultInternalRunner$1.run(DefaultInternalRunner.java:74)[mockito-core-2.28.2.jar]
	at o.m.i.r.DefaultInternalRunner.run(^:80)[^]
	at o.m.i.r.StrictRunner.run(StrictRunner.java:39)[^]
	at o.m.j.MockitoJUnitRunner.run(MockitoJUnitRunner.java:163)[^]
	at o.j.r.JUnitCore.run(JUnitCore.java:137)[junit-4.13.jar:4.13]
	at ^.run(^:115)[^]
	at o.j.v.e.e.RunnerExecutor.execute(RunnerExecutor.java:43)[junit-vintage-engine-5.6.2.jar:5.6.2]
	at j.u.s.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
	at j.u.s.ReferencePipeline$3$1.accept(ReferencePipeline.java:195)[^]
	at j.u.Iterator.forEachRemaining(Iterator.java:133)[^]
	at j.u.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)[^]
	at j.u.s.AbstractPipeline.copyInto(AbstractPipeline.java:484)[^]
	at ^.wrapAndCopyInto(^:474)[^]
	at j.u.s.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)[^]
	at j.u.s.ForEachOps$ForEachOp$OfRef.evaluateSequential(^:173)[^]
	at j.u.s.AbstractPipeline.evaluate(AbstractPipeline.java:234)[^]
	at j.u.s.ReferencePipeline.forEach(ReferencePipeline.java:497)[^]
	at o.j.v.e.VintageTestEngine.executeAllChildren(VintageTestEngine.java:82)[junit-vintage-engine-5.6.2.jar:5.6.2]
	at ^.execute(^:73)[^]
	at o.j.p.l.c.DefaultLauncher.execute(DefaultLauncher.java:248)[junit-platform-launcher-1.6.2.jar:1.6.2]
	at ^.lambda$execute$5(^:211)[^]
	at ^.withInterceptedStreams(^:226)[^]
	at ^.execute(^:199)[^]
	at ^.execute(^:132)[^]
	at o.a.m.s.j.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:154)[surefire-junit-platform-3.0.0-M4.jar:3.0.0-M4]
	at ^.invoke(^:127)[^]
	at o.a.m.s.b.ForkedBooter.runSuitesInProcess(ForkedBooter.java:377)[surefire-booter-3.0.0-M4.jar:3.0.0-M4]
	at ^.execute(^:138)[^]
	at ^.run(^:465)[^]
	at ^.main(^:451)[^]
2020-08-06T10:16:00.477Z ERROR c.c.l.r.p.PaymentSubmissionRabbit "main" "unexpected error: payment_short_reference [test-1234]" 
org.springframework.orm.jpa.JpaSystemException:nested exception is java.lang.IllegalArgumentException
	at c.c.l.r.p.PaymentSubmissionRabbit.submission(PaymentSubmissionRabbit.java:82)[classes/]
	at c.c.l.r.p.PaymentSubmissionRabbitTest.submission_jpaSystemException_logs(PaymentSubmissionRabbitTest.java:138)[test-classes/]
	at o.j.r.m.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)[junit-4.13.jar:4.13]
	at o.j.i.r.m.ReflectiveCallable.run(ReflectiveCallable.java:12)[^]
	at o.j.r.m.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)[^]
	at o.j.i.r.s.InvokeMethod.evaluate(InvokeMethod.java:17)[^]
	at o.j.i.r.s.RunBefores.evaluate(RunBefores.java:26)[^]
	at o.m.i.r.DefaultInternalRunner$1$1.evaluate(DefaultInternalRunner.java:44)[mockito-core-2.28.2.jar]
	at o.j.r.ParentRunner$3.evaluate(ParentRunner.java:306)[junit-4.13.jar:4.13]
	at o.j.r.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)[^]
	at o.j.r.ParentRunner.runLeaf(ParentRunner.java:366)[^]
	at o.j.r.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)[^]
	at ^.runChild(^:63)[^]
	at o.j.r.ParentRunner$4.run(ParentRunner.java:331)[^]
	at o.j.r.ParentRunner$1.schedule(^:79)[^]
	at o.j.r.ParentRunner.runChildren(^:329)[^]
	at ^.access$100(^:66)[^]
	at o.j.r.ParentRunner$2.evaluate(^:293)[^]
	at o.j.r.ParentRunner$3.evaluate(^:306)[^]
	at o.j.r.ParentRunner.run(^:413)[^]
	at o.m.i.r.DefaultInternalRunner$1.run(DefaultInternalRunner.java:74)[mockito-core-2.28.2.jar]
	at o.m.i.r.DefaultInternalRunner.run(^:80)[^]
	at o.m.i.r.StrictRunner.run(StrictRunner.java:39)[^]
	at o.m.j.MockitoJUnitRunner.run(MockitoJUnitRunner.java:163)[^]
	at o.j.r.JUnitCore.run(JUnitCore.java:137)[junit-4.13.jar:4.13]
	at ^.run(^:115)[^]
	at o.j.v.e.e.RunnerExecutor.execute(RunnerExecutor.java:43)[junit-vintage-engine-5.6.2.jar:5.6.2]
	at j.u.s.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
	at j.u.s.ReferencePipeline$3$1.accept(ReferencePipeline.java:195)[^]
	at j.u.Iterator.forEachRemaining(Iterator.java:133)[^]
	at j.u.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)[^]
	at j.u.s.AbstractPipeline.copyInto(AbstractPipeline.java:484)[^]
	at ^.wrapAndCopyInto(^:474)[^]
	at j.u.s.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)[^]
	at j.u.s.ForEachOps$ForEachOp$OfRef.evaluateSequential(^:173)[^]
	at j.u.s.AbstractPipeline.evaluate(AbstractPipeline.java:234)[^]
	at j.u.s.ReferencePipeline.forEach(ReferencePipeline.java:497)[^]
	at o.j.v.e.VintageTestEngine.executeAllChildren(VintageTestEngine.java:82)[junit-vintage-engine-5.6.2.jar:5.6.2]
	at ^.execute(^:73)[^]
	at o.j.p.l.c.DefaultLauncher.execute(DefaultLauncher.java:248)[junit-platform-launcher-1.6.2.jar:1.6.2]
	at ^.lambda$execute$5(^:211)[^]
	at ^.withInterceptedStreams(^:226)[^]
	at ^.execute(^:199)[^]
	at ^.execute(^:132)[^]
	at o.a.m.s.j.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:154)[surefire-junit-platform-3.0.0-M4.jar:3.0.0-M4]
	at ^.invoke(^:127)[^]
	at o.a.m.s.b.ForkedBooter.runSuitesInProcess(ForkedBooter.java:377)[surefire-booter-3.0.0-M4.jar:3.0.0-M4]
	at ^.execute(^:138)[^]
	at ^.run(^:465)[^]
	at ^.main(^:451)[^]
Caused by: java.lang.IllegalArgumentException
	at c.c.l.r.p.PaymentSubmissionRabbitTest.submission_jpaSystemException_logs(PaymentSubmissionRabbitTest.java:136)[test-classes/]
	at j.i.r.NativeMethodAccessorImpl.invoke0(Native Method)
	at ^.invoke(^:62)[^]
	at j.i.r.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)[^]
	at j.l.r.Method.invoke(Method.java:566)[^]
	... 48 more
[INFO] Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.198 s - in com.currencycloud.lhv.rabbit.payment.PaymentSubmissionRabbitTest
[INFO] Running com.currencycloud.lhv.ValidationUtilTest
[INFO] Tests run: 7, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.003 s - in com.currencycloud.lhv.ValidationUtilTest
[INFO] 
[INFO] Results:
[INFO] 
[INFO] Tests run: 147, Failures: 0, Errors: 0, Skipped: 0
[INFO] 
[INFO] 
[INFO] --- jacoco-maven-plugin:0.8.5:report (jacoco-report) @ application ---
[INFO] Loading execution data file /home/jenkins/agent/workspace/loud_payment-provider-lhv_PR-127/application/target/jacoco.exec
[INFO] Analyzed bundle 'LHV Provider' with 30 classes
[INFO] 
[INFO] --- maven-jar-plugin:3.2.0:jar (default-jar) @ application ---
[INFO] Building jar: /home/jenkins/agent/workspace/loud_payment-provider-lhv_PR-127/application/target/app.jar
[INFO] 
[INFO] --- maven-jar-plugin:3.2.0:jar (default) @ application ---
[INFO] Building jar: /home/jenkins/agent/workspace/loud_payment-provider-lhv_PR-127/application/target/app-original.jar
[INFO] 
[INFO] --- spring-boot-maven-plugin:2.3.2.RELEASE:repackage (repackage) @ application ---
[INFO] Replacing main artifact with repackaged archive
[INFO] 
[INFO] --- jacoco-maven-plugin:0.8.5:check (jacoco-check) @ application ---
[INFO] Loading execution data file /home/jenkins/agent/workspace/loud_payment-provider-lhv_PR-127/application/target/jacoco.exec
[INFO] Analyzed bundle 'application' with 30 classes
[INFO] All coverage checks have been met.
[INFO] 
[INFO] --- maven-install-plugin:2.4:install (default-install) @ application ---
[INFO] Installing /home/jenkins/agent/workspace/loud_payment-provider-lhv_PR-127/application/target/app.jar to /root/.mvnrepository/com/currencycloud/providers/lhv/application/1.0.0-SNAPSHOT/application-1.0.0-SNAPSHOT.jar
[INFO] Installing /home/jenkins/agent/workspace/loud_payment-provider-lhv_PR-127/application/pom.xml to /root/.mvnrepository/com/currencycloud/providers/lhv/application/1.0.0-SNAPSHOT/application-1.0.0-SNAPSHOT.pom
[INFO] Installing /home/jenkins/agent/workspace/loud_payment-provider-lhv_PR-127/application/target/app-original.jar to /root/.mvnrepository/com/currencycloud/providers/lhv/application/1.0.0-SNAPSHOT/application-1.0.0-SNAPSHOT-original.jar
[INFO] 
[INFO] --------------< com.currencycloud.providers.lhv:wiremock >--------------
[INFO] Building wiremock 1.0.0-SNAPSHOT                                   [3/4]
[INFO] --------------------------------[ jar ]---------------------------------
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ wiremock ---
[WARNING] Using platform encoding (UTF-8 actually) to copy filtered resources, i.e. build is platform dependent!
[INFO] Copying 11 resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ wiremock ---
[INFO] No sources to compile
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ wiremock ---
[WARNING] Using platform encoding (UTF-8 actually) to copy filtered resources, i.e. build is platform dependent!
[INFO] skip non existing resourceDirectory /home/jenkins/agent/workspace/loud_payment-provider-lhv_PR-127/wiremock/src/test/resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.1:testCompile (default-testCompile) @ wiremock ---
[INFO] No sources to compile
[INFO] 
[INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ wiremock ---
[INFO] No tests to run.
[INFO] 
[INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ wiremock ---
[INFO] Building jar: /home/jenkins/agent/workspace/loud_payment-provider-lhv_PR-127/wiremock/target/wiremock-1.0.0-SNAPSHOT.jar
[INFO] 
[INFO] --- maven-install-plugin:2.4:install (default-install) @ wiremock ---
[INFO] Installing /home/jenkins/agent/workspace/loud_payment-provider-lhv_PR-127/wiremock/target/wiremock-1.0.0-SNAPSHOT.jar to /root/.mvnrepository/com/currencycloud/providers/lhv/wiremock/1.0.0-SNAPSHOT/wiremock-1.0.0-SNAPSHOT.jar
[INFO] Installing /home/jenkins/agent/workspace/loud_payment-provider-lhv_PR-127/wiremock/pom.xml to /root/.mvnrepository/com/currencycloud/providers/lhv/wiremock/1.0.0-SNAPSHOT/wiremock-1.0.0-SNAPSHOT.pom
[INFO] 
[INFO] ----------------< com.currencycloud.providers.lhv:bdd >-----------------
[INFO] Building Behaviour Driven Design Tests 1.0.0-SNAPSHOT              [4/4]
[INFO] --------------------------------[ jar ]---------------------------------
[INFO] 
[INFO] --- maven-dependency-plugin:2.2:unpack-dependencies (unpack) @ bdd ---
[INFO] Unpacking /home/jenkins/agent/workspace/loud_payment-provider-lhv_PR-127/wiremock/target/wiremock-1.0.0-SNAPSHOT.jar to /home/jenkins/agent/workspace/loud_payment-provider-lhv_PR-127/bdd/target with includes pki/**,,wiremock/** and excludes 
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ bdd ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /home/jenkins/agent/workspace/loud_payment-provider-lhv_PR-127/bdd/src/main/resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.1:compile (default-compile) @ bdd ---
[INFO] No sources to compile
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ bdd ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 15 resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.1:testCompile (default-testCompile) @ bdd ---
[INFO] Changes detected - recompiling the module!
[INFO] Compiling 2 source files to /home/jenkins/agent/workspace/loud_payment-provider-lhv_PR-127/bdd/target/test-classes
[INFO] 
[INFO] --- maven-surefire-plugin:3.0.0-M4:test (default-test) @ bdd ---
[INFO] 
[INFO] -------------------------------------------------------
[INFO]  T E S T S
[INFO] -------------------------------------------------------
[INFO] Running com.currencycloud.providers.lhv.bdd.LHVBDDTests
[Broker] BRK-1006 : Using configuration : N/A
[Broker] BRK-1001 : Startup : Version: 8.0.0 Build: 08ef221bfb23d63890db4f646722a97e6e1976b2
[Broker] BRK-1010 : Platform : JVM : Oracle Corporation version: 11.0.2+9 OS : Linux version: 4.14.177-139.253.amzn2.x86_64 arch: amd64 cores: 1
[Broker] BRK-1011 : Maximum Memory : Heap : 179,306,496 bytes Direct : 179,306,496 bytes
[Broker] BRK-1017 : Process : PID : 247
[Broker] BRK-1002 : Starting : Listening on TCP port 47008
[Broker] BRK-1004 : Qpid Broker Ready
[Server@1753475d]: [Thread[main,5,main]]: checkRunning(false) entered
[Server@1753475d]: [Thread[main,5,main]]: checkRunning(false) exited
[Server@1753475d]: [Thread[main,5,main]]: setDatabaseName(0,test_database)
[Server@1753475d]: [Thread[main,5,main]]: checkRunning(false) entered
[Server@1753475d]: [Thread[main,5,main]]: checkRunning(false) exited
[Server@1753475d]: [Thread[main,5,main]]: setDatabasePath(0,jdbc:h2:file:./target/database;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE)
[Server@1753475d]: [Thread[main,5,main]]: checkRunning(false) entered
[Server@1753475d]: [Thread[main,5,main]]: checkRunning(false) exited
[Server@1753475d]: [Thread[main,5,main]]: setPort(26354)
[Server@1753475d]: [Thread[main,5,main]]: checkRunning(false) entered
[Server@1753475d]: [Thread[main,5,main]]: checkRunning(false) exited
[Server@1753475d]: [Thread[main,5,main]]: setDaemon(true)
[Server@1753475d]: Initiating startup sequence...
[Server@1753475d]: Server socket opened successfully in 68 ms.
[Server@1753475d]: Database [index=0, id=0, db=file:jdbc:h2:file:./target/database, alias=test_database] opened successfully in 599 ms.
[Server@1753475d]: Startup sequence completed in 669 ms.
[Server@1753475d]: 2020-08-06 10:16:40.361 HSQLDB server 2.5.1 is online on port 26354
[Server@1753475d]: To close normally, connect and execute SHUTDOWN SQL
[Server@1753475d]: From command line, use [Ctrl]+[C] to abort abruptly
Aug 06, 2020 10:16:46 AM org.apache.coyote.AbstractProtocol init
INFO: Initializing ProtocolHandler ["http-nio-9404"]
Aug 06, 2020 10:16:46 AM org.apache.catalina.core.StandardService startInternal
INFO: Starting service [Tomcat]
Aug 06, 2020 10:16:46 AM org.apache.catalina.core.StandardEngine startInternal
INFO: Starting Servlet engine: [Apache Tomcat/9.0.36]
Aug 06, 2020 10:16:46 AM org.apache.catalina.core.ApplicationContext log
INFO: Initializing Spring embedded WebApplicationContext
Aug 06, 2020 10:16:57 AM org.apache.coyote.AbstractProtocol start
INFO: Starting ProtocolHandler ["http-nio-9404"]

Scenario: Micro-service documenation index page      # src/test/resources/features/Documentation.feature:3
Aug 06, 2020 10:16:59 AM org.apache.catalina.core.ApplicationContext log
INFO: Initializing Spring DispatcherServlet 'dispatcherServlet'
  When I send a HTTP request to "apidocs/index.html" # com.currencycloud.bdd.steps.HTTPSteps.sendHTTPRequest(java.lang.String)
  Then the status code is 200                        # com.currencycloud.bdd.steps.HTTPSteps.assertStatusCode(int)
  And the response header Content-Type is text/html  # com.currencycloud.bdd.steps.HTTPSteps.assertHeader(java.lang.String,java.lang.String)
  And the response body contains 'LHV Provider'      # com.currencycloud.bdd.steps.HTTPSteps.assertResponseBodyContains(java.lang.String)

@LHV-130
Scenario: View summary                                                                   # src/test/resources/features/PaymentSummary.feature:7
  Given "paymentQueue" is "payment_provider_lhv.payment_submission"                      # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"            # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.queuedForSubmissionCount" is "1" # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And the JSON response body is                                                          # com.currencycloud.bdd.steps.HTTPSteps.assertJSONResponseBody(io.cucumber.datatable.DataTable)

Scenario: Invalid JSON test                                                           # src/test/resources/features/Queue.feature:3
  When I put the message "Nonsense JSON" on "payment_provider_lhv.payment_submission" # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessage(java.lang.String,java.lang.String)
  Then I read the message "Nonsense JSON" from the "dead_letter_queue" queue          # com.currencycloud.bdd.steps.AMQPSteps.assertMessage(java.lang.String,java.lang.String)

Scenario: Invalid data in message # src/test/resources/features/Queue.feature:7

Scenario: Required Fields Successful Data                                            # src/test/resources/features/RequiredFields.feature:3
  When I send a HTTP request to "payment_submission/required_fields" with parameters # com.currencycloud.bdd.steps.HTTPSteps.sendHTTPRequest(java.lang.String,io.cucumber.datatable.DataTable)
  Then the status code is 200                                                        # com.currencycloud.bdd.steps.HTTPSteps.assertStatusCode(int)
  And the response header Content-Type is application/json                           # com.currencycloud.bdd.steps.HTTPSteps.assertHeader(java.lang.String,java.lang.String)
  And the response body is equal to "required_fields_success.json"                   # com.currencycloud.bdd.steps.HTTPSteps.theResponseBodyIsEqualTo(java.lang.String)

Scenario: Required Fields Successful Different Data                                  # src/test/resources/features/RequiredFields.feature:12
  When I send a HTTP request to "payment_submission/required_fields" with parameters # com.currencycloud.bdd.steps.HTTPSteps.sendHTTPRequest(java.lang.String,io.cucumber.datatable.DataTable)
  Then the status code is 200                                                        # com.currencycloud.bdd.steps.HTTPSteps.assertStatusCode(int)
  And the response header Content-Type is application/json                           # com.currencycloud.bdd.steps.HTTPSteps.assertHeader(java.lang.String,java.lang.String)
  And the response body is equal to "required_fields_success.json"                   # com.currencycloud.bdd.steps.HTTPSteps.theResponseBodyIsEqualTo(java.lang.String)

Scenario: Required Fields With Incorrect Country                                     # src/test/resources/features/RequiredFields.feature:20
  When I send a HTTP request to "payment_submission/required_fields" with parameters # com.currencycloud.bdd.steps.HTTPSteps.sendHTTPRequest(java.lang.String,io.cucumber.datatable.DataTable)
  Then the status code is 422                                                        # com.currencycloud.bdd.steps.HTTPSteps.assertStatusCode(int)
  And the response header Content-Type is application/json                           # com.currencycloud.bdd.steps.HTTPSteps.assertHeader(java.lang.String,java.lang.String)
  And the response body is equal to "required_fields_country_error.json"             # com.currencycloud.bdd.steps.HTTPSteps.theResponseBodyIsEqualTo(java.lang.String)

Scenario: Required Fields With Incorrect Currency Code                               # src/test/resources/features/RequiredFields.feature:28
  When I send a HTTP request to "payment_submission/required_fields" with parameters # com.currencycloud.bdd.steps.HTTPSteps.sendHTTPRequest(java.lang.String,io.cucumber.datatable.DataTable)
  Then the status code is 422                                                        # com.currencycloud.bdd.steps.HTTPSteps.assertStatusCode(int)
  And the response header Content-Type is application/json                           # com.currencycloud.bdd.steps.HTTPSteps.assertHeader(java.lang.String,java.lang.String)
  And the response body is equal to "required_fields_currency_error.json"            # com.currencycloud.bdd.steps.HTTPSteps.theResponseBodyIsEqualTo(java.lang.String)

@sanitisation
Scenario Outline: Sanitisation of message values: paymentCurrency is truncate to 3                         # src/test/resources/features/Sanitisation.feature:18
  Given the XML namespace "urn:iso:std:iso:20022:tech:xsd:pain.001.001.03"                                 # com.currencycloud.bdd.steps.WireMockSteps.setDefaultNamespace(java.lang.String)
  And "paymentQueue" is "payment_provider_lhv.payment_submission"                                          # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  Given "paymentCurrency" is "ABCD"                                                                        # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"                              # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.queuedForSubmissionCount" is "1"                   # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And I send a HTTP POST request to "payment_submission/submit"                                            # com.currencycloud.bdd.steps.HTTPSteps.sendHTTPPostRequest(java.lang.String)
  And "/payment" is called on the LHV Service                                                              # com.currencycloud.bdd.steps.WireMockSteps.assertURI(java.lang.String)
  And the XML request has "/Document/CstmrCdtTrfInitn/PmtInf/CdtTrfTxInf/Amt/InstdAmt/@Ccy" equal to "ABC" # com.currencycloud.bdd.steps.WireMockSteps.assertXPath(java.lang.String,java.lang.String)

@sanitisation
Scenario Outline: Sanitisation of message values: paymentCurrency is uppercased                            # src/test/resources/features/Sanitisation.feature:19
  Given the XML namespace "urn:iso:std:iso:20022:tech:xsd:pain.001.001.03"                                 # com.currencycloud.bdd.steps.WireMockSteps.setDefaultNamespace(java.lang.String)
  And "paymentQueue" is "payment_provider_lhv.payment_submission"                                          # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  Given "paymentCurrency" is "abc"                                                                         # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"                              # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.queuedForSubmissionCount" is "1"                   # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And I send a HTTP POST request to "payment_submission/submit"                                            # com.currencycloud.bdd.steps.HTTPSteps.sendHTTPPostRequest(java.lang.String)
  And "/payment" is called on the LHV Service                                                              # com.currencycloud.bdd.steps.WireMockSteps.assertURI(java.lang.String)
  And the XML request has "/Document/CstmrCdtTrfInitn/PmtInf/CdtTrfTxInf/Amt/InstdAmt/@Ccy" equal to "ABC" # com.currencycloud.bdd.steps.WireMockSteps.assertXPath(java.lang.String,java.lang.String)

@sanitisation
Scenario Outline: Sanitisation of message values: paymentReason is truncate to 140                                                                                                                                                             # src/test/resources/features/Sanitisation.feature:20
  Given the XML namespace "urn:iso:std:iso:20022:tech:xsd:pain.001.001.03"                                                                                                                                                                     # com.currencycloud.bdd.steps.WireMockSteps.setDefaultNamespace(java.lang.String)
  And "paymentQueue" is "payment_provider_lhv.payment_submission"                                                                                                                                                                              # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  Given "paymentReason" is "VZNquScHbKPDSOdkoDYnpBylmtrFuLiLDrHvoPdsvQUIjHYepdfhRFRMNkJJhsasSKkdyhykwLMMNzAvVZNtBfIylPuwEqppNGJACwDnwuQsiczpKEWggktOxWbUuFEkeSZRfHVIaKNrO"                                                                     # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"                                                                                                                                                                  # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.queuedForSubmissionCount" is "1"                                                                                                                                                       # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And I send a HTTP POST request to "payment_submission/submit"                                                                                                                                                                                # com.currencycloud.bdd.steps.HTTPSteps.sendHTTPPostRequest(java.lang.String)
  And "/payment" is called on the LHV Service                                                                                                                                                                                                  # com.currencycloud.bdd.steps.WireMockSteps.assertURI(java.lang.String)
  And the XML request has "/Document/CstmrCdtTrfInitn/PmtInf/CdtTrfTxInf/RmtInf/Ustrd" equal to "VZNquScHbKPDSOdkoDYnpBylmtrFuLiLDrHvoPdsvQUIjHYepdfhRFRMNkJJhsasSKkdyhykwLMMNzAvVZNtBfIylPuwEqppNGJACwDnwuQsiczpKEWggktOxWbUuFEkeSZRfHVIaKNr" # com.currencycloud.bdd.steps.WireMockSteps.assertXPath(java.lang.String,java.lang.String)

@sanitisation
Scenario Outline: Sanitisation of message values: paymentReference is truncate to 140                                                                                                                                                          # src/test/resources/features/Sanitisation.feature:21
  Given the XML namespace "urn:iso:std:iso:20022:tech:xsd:pain.001.001.03"                                                                                                                                                                     # com.currencycloud.bdd.steps.WireMockSteps.setDefaultNamespace(java.lang.String)
  And "paymentQueue" is "payment_provider_lhv.payment_submission"                                                                                                                                                                              # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  Given "paymentReference" is "rrDxOJmPZJgXKkBNSvjlTafGEwSNNHitdKmDzISLySnpizilSipKKNTQBQnlejgqPbRGaKodYyCZaZOoONJhuKRBGHYROjItxJoOdANtrrxOZbbVfNqJTEoTIgwcRUnmqHyIVXWSZHsYH"                                                                  # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"                                                                                                                                                                  # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.queuedForSubmissionCount" is "1"                                                                                                                                                       # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And I send a HTTP POST request to "payment_submission/submit"                                                                                                                                                                                # com.currencycloud.bdd.steps.HTTPSteps.sendHTTPPostRequest(java.lang.String)
  And "/payment" is called on the LHV Service                                                                                                                                                                                                  # com.currencycloud.bdd.steps.WireMockSteps.assertURI(java.lang.String)
  And the XML request has "/Document/CstmrCdtTrfInitn/PmtInf/CdtTrfTxInf/RmtInf/Ustrd" equal to "Testing rrDxOJmPZJgXKkBNSvjlTafGEwSNNHitdKmDzISLySnpizilSipKKNTQBQnlejgqPbRGaKodYyCZaZOoONJhuKRBGHYROjItxJoOdANtrrxOZbbVfNqJTEoTIgwcRUnmqHyI" # com.currencycloud.bdd.steps.WireMockSteps.assertXPath(java.lang.String,java.lang.String)

@sanitisation
Scenario Outline: Sanitisation of message values: paymentValueDate is truncate to 10            # src/test/resources/features/Sanitisation.feature:22
  Given the XML namespace "urn:iso:std:iso:20022:tech:xsd:pain.001.001.03"                      # com.currencycloud.bdd.steps.WireMockSteps.setDefaultNamespace(java.lang.String)
  And "paymentQueue" is "payment_provider_lhv.payment_submission"                               # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  Given "paymentValueDate" is "2010-10-100"                                                     # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"                   # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.queuedForSubmissionCount" is "1"        # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And I send a HTTP POST request to "payment_submission/submit"                                 # com.currencycloud.bdd.steps.HTTPSteps.sendHTTPPostRequest(java.lang.String)
  And "/payment" is called on the LHV Service                                                   # com.currencycloud.bdd.steps.WireMockSteps.assertURI(java.lang.String)
  And the XML request has "/Document/CstmrCdtTrfInitn/PmtInf/ReqdExctnDt" equal to "2010-10-10" # com.currencycloud.bdd.steps.WireMockSteps.assertXPath(java.lang.String,java.lang.String)

@sanitisation
Scenario Outline: Sanitisation of message values: payerCompanyName is truncate to 140                                                                                                                                                          # src/test/resources/features/Sanitisation.feature:23
  Given the XML namespace "urn:iso:std:iso:20022:tech:xsd:pain.001.001.03"                                                                                                                                                                     # com.currencycloud.bdd.steps.WireMockSteps.setDefaultNamespace(java.lang.String)
  And "paymentQueue" is "payment_provider_lhv.payment_submission"                                                                                                                                                                              # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  Given "payerCompanyName" is "SUntsLMxzdKXJGjGhtfGaTgSSqyOpCmjIISuzPhBYVBRjvvCNPvYJqBZJDzBUmKtqHaVaphcSrlBmXHVyXdRgyNSyhNnWISyppvTsoLLEJjemPhuHJdEfAsAZRsgjSqIZBuyfBQXMUqua"                                                                  # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"                                                                                                                                                                  # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.queuedForSubmissionCount" is "1"                                                                                                                                                       # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And I send a HTTP POST request to "payment_submission/submit"                                                                                                                                                                                # com.currencycloud.bdd.steps.HTTPSteps.sendHTTPPostRequest(java.lang.String)
  And "/payment" is called on the LHV Service                                                                                                                                                                                                  # com.currencycloud.bdd.steps.WireMockSteps.assertURI(java.lang.String)
  And the XML request has "/Document/CstmrCdtTrfInitn/PmtInf/CdtTrfTxInf/UltmtDbtr/Nm" equal to "SUntsLMxzdKXJGjGhtfGaTgSSqyOpCmjIISuzPhBYVBRjvvCNPvYJqBZJDzBUmKtqHaVaphcSrlBmXHVyXdRgyNSyhNnWISyppvTsoLLEJjemPhuHJdEfAsAZRsgjSqIZBuyfBQXMUqu" # com.currencycloud.bdd.steps.WireMockSteps.assertXPath(java.lang.String,java.lang.String)

@sanitisation
Scenario Outline: Sanitisation of message values: payerAddress is truncate to 70                                                                                                     # src/test/resources/features/Sanitisation.feature:24
  Given the XML namespace "urn:iso:std:iso:20022:tech:xsd:pain.001.001.03"                                                                                                           # com.currencycloud.bdd.steps.WireMockSteps.setDefaultNamespace(java.lang.String)
  And "paymentQueue" is "payment_provider_lhv.payment_submission"                                                                                                                    # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  Given "payerAddress" is "govOjlJSyXtABhEDRajchQKpdVtSDYMgbrOYSzWEnNOutqSQswThntvxeIziXdqdPQYjbeb"                                                                                  # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"                                                                                                        # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.queuedForSubmissionCount" is "1"                                                                                             # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And I send a HTTP POST request to "payment_submission/submit"                                                                                                                      # com.currencycloud.bdd.steps.HTTPSteps.sendHTTPPostRequest(java.lang.String)
  And "/payment" is called on the LHV Service                                                                                                                                        # com.currencycloud.bdd.steps.WireMockSteps.assertURI(java.lang.String)
  And the XML request has "/Document/CstmrCdtTrfInitn/PmtInf/CdtTrfTxInf/UltmtDbtr/PstlAdr/StrtNm" equal to "govOjlJSyXtABhEDRajchQKpdVtSDYMgbrOYSzWEnNOutqSQswThntvxeIziXdqdPQYjbe" # com.currencycloud.bdd.steps.WireMockSteps.assertXPath(java.lang.String,java.lang.String)

@sanitisation
Scenario Outline: Sanitisation of message values: payerCity is truncate to 35                                                                    # src/test/resources/features/Sanitisation.feature:25
  Given the XML namespace "urn:iso:std:iso:20022:tech:xsd:pain.001.001.03"                                                                       # com.currencycloud.bdd.steps.WireMockSteps.setDefaultNamespace(java.lang.String)
  And "paymentQueue" is "payment_provider_lhv.payment_submission"                                                                                # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  Given "payerCity" is "pzLIqfReTvUcSFtVYPvHzHFUHFtVUTAZIQde"                                                                                    # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"                                                                    # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.queuedForSubmissionCount" is "1"                                                         # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And I send a HTTP POST request to "payment_submission/submit"                                                                                  # com.currencycloud.bdd.steps.HTTPSteps.sendHTTPPostRequest(java.lang.String)
  And "/payment" is called on the LHV Service                                                                                                    # com.currencycloud.bdd.steps.WireMockSteps.assertURI(java.lang.String)
  And the XML request has "/Document/CstmrCdtTrfInitn/PmtInf/CdtTrfTxInf/UltmtDbtr/PstlAdr/TwnNm" equal to "pzLIqfReTvUcSFtVYPvHzHFUHFtVUTAZIQd" # com.currencycloud.bdd.steps.WireMockSteps.assertXPath(java.lang.String,java.lang.String)

@sanitisation
Scenario Outline: Sanitisation of message values: payerCountryCode is truncate to 2                            # src/test/resources/features/Sanitisation.feature:26
  Given the XML namespace "urn:iso:std:iso:20022:tech:xsd:pain.001.001.03"                                     # com.currencycloud.bdd.steps.WireMockSteps.setDefaultNamespace(java.lang.String)
  And "paymentQueue" is "payment_provider_lhv.payment_submission"                                              # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  Given "payerCountryCode" is "ABC"                                                                            # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"                                  # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.queuedForSubmissionCount" is "1"                       # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And I send a HTTP POST request to "payment_submission/submit"                                                # com.currencycloud.bdd.steps.HTTPSteps.sendHTTPPostRequest(java.lang.String)
  And "/payment" is called on the LHV Service                                                                  # com.currencycloud.bdd.steps.WireMockSteps.assertURI(java.lang.String)
  And the XML request has "/Document/CstmrCdtTrfInitn/PmtInf/CdtTrfTxInf/UltmtDbtr/PstlAdr/Ctry" equal to "AB" # com.currencycloud.bdd.steps.WireMockSteps.assertXPath(java.lang.String,java.lang.String)

@sanitisation
Scenario Outline: Sanitisation of message values: payerCountryCode is uppercased                               # src/test/resources/features/Sanitisation.feature:27
  Given the XML namespace "urn:iso:std:iso:20022:tech:xsd:pain.001.001.03"                                     # com.currencycloud.bdd.steps.WireMockSteps.setDefaultNamespace(java.lang.String)
  And "paymentQueue" is "payment_provider_lhv.payment_submission"                                              # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  Given "payerCountryCode" is "ab"                                                                             # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"                                  # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.queuedForSubmissionCount" is "1"                       # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And I send a HTTP POST request to "payment_submission/submit"                                                # com.currencycloud.bdd.steps.HTTPSteps.sendHTTPPostRequest(java.lang.String)
  And "/payment" is called on the LHV Service                                                                  # com.currencycloud.bdd.steps.WireMockSteps.assertURI(java.lang.String)
  And the XML request has "/Document/CstmrCdtTrfInitn/PmtInf/CdtTrfTxInf/UltmtDbtr/PstlAdr/Ctry" equal to "AB" # com.currencycloud.bdd.steps.WireMockSteps.assertXPath(java.lang.String,java.lang.String)

@sanitisation
Scenario Outline: Sanitisation of message values: payerPostcode is truncate to 16                                             # src/test/resources/features/Sanitisation.feature:28
  Given the XML namespace "urn:iso:std:iso:20022:tech:xsd:pain.001.001.03"                                                    # com.currencycloud.bdd.steps.WireMockSteps.setDefaultNamespace(java.lang.String)
  And "paymentQueue" is "payment_provider_lhv.payment_submission"                                                             # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  Given "payerPostcode" is "JXoDRuGxTDphFlIRU"                                                                                # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"                                                 # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.queuedForSubmissionCount" is "1"                                      # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And I send a HTTP POST request to "payment_submission/submit"                                                               # com.currencycloud.bdd.steps.HTTPSteps.sendHTTPPostRequest(java.lang.String)
  And "/payment" is called on the LHV Service                                                                                 # com.currencycloud.bdd.steps.WireMockSteps.assertURI(java.lang.String)
  And the XML request has "/Document/CstmrCdtTrfInitn/PmtInf/CdtTrfTxInf/UltmtDbtr/PstlAdr/PstCd" equal to "JXoDRuGxTDphFlIR" # com.currencycloud.bdd.steps.WireMockSteps.assertXPath(java.lang.String,java.lang.String)

@sanitisation
Scenario Outline: Sanitisation of message values: providerIban is truncate to 34                                             # src/test/resources/features/Sanitisation.feature:29
  Given the XML namespace "urn:iso:std:iso:20022:tech:xsd:pain.001.001.03"                                                   # com.currencycloud.bdd.steps.WireMockSteps.setDefaultNamespace(java.lang.String)
  And "paymentQueue" is "payment_provider_lhv.payment_submission"                                                            # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  Given "providerIban" is "PL461050008610000090319541690123456"                                                              # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"                                                # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.queuedForSubmissionCount" is "1"                                     # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And I send a HTTP POST request to "payment_submission/submit"                                                              # com.currencycloud.bdd.steps.HTTPSteps.sendHTTPPostRequest(java.lang.String)
  And "/payment" is called on the LHV Service                                                                                # com.currencycloud.bdd.steps.WireMockSteps.assertURI(java.lang.String)
  And the XML request has "/Document/CstmrCdtTrfInitn/PmtInf/DbtrAcct/Id/IBAN" equal to "PL46105000861000009031954169012345" # com.currencycloud.bdd.steps.WireMockSteps.assertXPath(java.lang.String,java.lang.String)

@sanitisation
Scenario Outline: Sanitisation of message values: providerBicSwift is truncate to 11                        # src/test/resources/features/Sanitisation.feature:30
  Given the XML namespace "urn:iso:std:iso:20022:tech:xsd:pain.001.001.03"                                  # com.currencycloud.bdd.steps.WireMockSteps.setDefaultNamespace(java.lang.String)
  And "paymentQueue" is "payment_provider_lhv.payment_submission"                                           # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  Given "providerBicSwift" is "BICSWIFTREGA"                                                                # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"                               # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.queuedForSubmissionCount" is "1"                    # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And I send a HTTP POST request to "payment_submission/submit"                                             # com.currencycloud.bdd.steps.HTTPSteps.sendHTTPPostRequest(java.lang.String)
  And "/payment" is called on the LHV Service                                                               # com.currencycloud.bdd.steps.WireMockSteps.assertURI(java.lang.String)
  And the XML request has "/Document/CstmrCdtTrfInitn/PmtInf/DbtrAgt/FinInstnId/BIC" equal to "BICSWIFTREG" # com.currencycloud.bdd.steps.WireMockSteps.assertXPath(java.lang.String,java.lang.String)

@sanitisation
Scenario Outline: Sanitisation of message values: providerBicSwift is uppercased                            # src/test/resources/features/Sanitisation.feature:31
  Given the XML namespace "urn:iso:std:iso:20022:tech:xsd:pain.001.001.03"                                  # com.currencycloud.bdd.steps.WireMockSteps.setDefaultNamespace(java.lang.String)
  And "paymentQueue" is "payment_provider_lhv.payment_submission"                                           # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  Given "providerBicSwift" is "bicswiftreg"                                                                 # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"                               # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.queuedForSubmissionCount" is "1"                    # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And I send a HTTP POST request to "payment_submission/submit"                                             # com.currencycloud.bdd.steps.HTTPSteps.sendHTTPPostRequest(java.lang.String)
  And "/payment" is called on the LHV Service                                                               # com.currencycloud.bdd.steps.WireMockSteps.assertURI(java.lang.String)
  And the XML request has "/Document/CstmrCdtTrfInitn/PmtInf/DbtrAgt/FinInstnId/BIC" equal to "BICSWIFTREG" # com.currencycloud.bdd.steps.WireMockSteps.assertXPath(java.lang.String,java.lang.String)

@sanitisation
Scenario Outline: Sanitisation of message values: providerBankCountryCode is truncate to 2    # src/test/resources/features/Sanitisation.feature:32
  Given the XML namespace "urn:iso:std:iso:20022:tech:xsd:pain.001.001.03"                    # com.currencycloud.bdd.steps.WireMockSteps.setDefaultNamespace(java.lang.String)
  And "paymentQueue" is "payment_provider_lhv.payment_submission"                             # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  Given "providerBankCountryCode" is "GBR"                                                    # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"                 # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.queuedForSubmissionCount" is "1"      # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And I send a HTTP POST request to "payment_submission/submit"                               # com.currencycloud.bdd.steps.HTTPSteps.sendHTTPPostRequest(java.lang.String)
  And "/payment" is called on the LHV Service                                                 # com.currencycloud.bdd.steps.WireMockSteps.assertURI(java.lang.String)
  And the XML request has "/Document/CstmrCdtTrfInitn/PmtInf/Dbtr/PstlAdr/Ctry" equal to "GB" # com.currencycloud.bdd.steps.WireMockSteps.assertXPath(java.lang.String,java.lang.String)

@sanitisation
Scenario Outline: Sanitisation of message values: providerBankCountryCode is uppercased       # src/test/resources/features/Sanitisation.feature:33
  Given the XML namespace "urn:iso:std:iso:20022:tech:xsd:pain.001.001.03"                    # com.currencycloud.bdd.steps.WireMockSteps.setDefaultNamespace(java.lang.String)
  And "paymentQueue" is "payment_provider_lhv.payment_submission"                             # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  Given "providerBankCountryCode" is "gb"                                                     # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"                 # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.queuedForSubmissionCount" is "1"      # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And I send a HTTP POST request to "payment_submission/submit"                               # com.currencycloud.bdd.steps.HTTPSteps.sendHTTPPostRequest(java.lang.String)
  And "/payment" is called on the LHV Service                                                 # com.currencycloud.bdd.steps.WireMockSteps.assertURI(java.lang.String)
  And the XML request has "/Document/CstmrCdtTrfInitn/PmtInf/Dbtr/PstlAdr/Ctry" equal to "GB" # com.currencycloud.bdd.steps.WireMockSteps.assertXPath(java.lang.String,java.lang.String)

@sanitisation
Scenario Outline: Sanitisation of message values: beneficiaryBankBicSwift is truncate to 11                             # src/test/resources/features/Sanitisation.feature:34
  Given the XML namespace "urn:iso:std:iso:20022:tech:xsd:pain.001.001.03"                                              # com.currencycloud.bdd.steps.WireMockSteps.setDefaultNamespace(java.lang.String)
  And "paymentQueue" is "payment_provider_lhv.payment_submission"                                                       # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  Given "beneficiaryBankBicSwift" is "BICSWIFTREGX"                                                                     # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"                                           # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.queuedForSubmissionCount" is "1"                                # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And I send a HTTP POST request to "payment_submission/submit"                                                         # com.currencycloud.bdd.steps.HTTPSteps.sendHTTPPostRequest(java.lang.String)
  And "/payment" is called on the LHV Service                                                                           # com.currencycloud.bdd.steps.WireMockSteps.assertURI(java.lang.String)
  And the XML request has "/Document/CstmrCdtTrfInitn/PmtInf/CdtTrfTxInf/CdtrAgt/FinInstnId/BIC" equal to "BICSWIFTREG" # com.currencycloud.bdd.steps.WireMockSteps.assertXPath(java.lang.String,java.lang.String)

@sanitisation
Scenario Outline: Sanitisation of message values: beneficiaryBankBicSwift is uppercased                                 # src/test/resources/features/Sanitisation.feature:35
  Given the XML namespace "urn:iso:std:iso:20022:tech:xsd:pain.001.001.03"                                              # com.currencycloud.bdd.steps.WireMockSteps.setDefaultNamespace(java.lang.String)
  And "paymentQueue" is "payment_provider_lhv.payment_submission"                                                       # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  Given "beneficiaryBankBicSwift" is "bicswiftreg"                                                                      # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"                                           # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.queuedForSubmissionCount" is "1"                                # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And I send a HTTP POST request to "payment_submission/submit"                                                         # com.currencycloud.bdd.steps.HTTPSteps.sendHTTPPostRequest(java.lang.String)
  And "/payment" is called on the LHV Service                                                                           # com.currencycloud.bdd.steps.WireMockSteps.assertURI(java.lang.String)
  And the XML request has "/Document/CstmrCdtTrfInitn/PmtInf/CdtTrfTxInf/CdtrAgt/FinInstnId/BIC" equal to "BICSWIFTREG" # com.currencycloud.bdd.steps.WireMockSteps.assertXPath(java.lang.String,java.lang.String)

@sanitisation
Scenario Outline: Sanitisation of message values: beneficiaryFirstName is truncate to 140                                                                                                                                                 # src/test/resources/features/Sanitisation.feature:36
  Given the XML namespace "urn:iso:std:iso:20022:tech:xsd:pain.001.001.03"                                                                                                                                                                # com.currencycloud.bdd.steps.WireMockSteps.setDefaultNamespace(java.lang.String)
  And "paymentQueue" is "payment_provider_lhv.payment_submission"                                                                                                                                                                         # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  Given "beneficiaryFirstName" is "DBHiagKlimUgllWhVolPqsAlAmLjhmGELCWaLjknqpzsVDfNaavuZGOFzwCzPXJIIoJKKrsKfSpTCLUMZonHdojgaRlWErswgjcHovKTyNnjsEVbcXJaBmBJxGALLPzmkdNpBpqxsHCKw"                                                         # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"                                                                                                                                                             # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.queuedForSubmissionCount" is "1"                                                                                                                                                  # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And I send a HTTP POST request to "payment_submission/submit"                                                                                                                                                                           # com.currencycloud.bdd.steps.HTTPSteps.sendHTTPPostRequest(java.lang.String)
  And "/payment" is called on the LHV Service                                                                                                                                                                                             # com.currencycloud.bdd.steps.WireMockSteps.assertURI(java.lang.String)
  And the XML request has "/Document/CstmrCdtTrfInitn/PmtInf/CdtTrfTxInf/Cdtr/Nm" equal to "DBHiagKlimUgllWhVolPqsAlAmLjhmGELCWaLjknqpzsVDfNaavuZGOFzwCzPXJIIoJKKrsKfSpTCLUMZonHdojgaRlWErswgjcHovKTyNnjsEVbcXJaBmBJxGALLPzmkdNpBpqxsHCK" # com.currencycloud.bdd.steps.WireMockSteps.assertXPath(java.lang.String,java.lang.String)

@sanitisation
Scenario Outline: Sanitisation of message values: beneficiaryLastName is truncate to 140                                                                                                                                                  # src/test/resources/features/Sanitisation.feature:37
  Given the XML namespace "urn:iso:std:iso:20022:tech:xsd:pain.001.001.03"                                                                                                                                                                # com.currencycloud.bdd.steps.WireMockSteps.setDefaultNamespace(java.lang.String)
  And "paymentQueue" is "payment_provider_lhv.payment_submission"                                                                                                                                                                         # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  Given "beneficiaryLastName" is "qojJLPwOQrQoYmRWwsPvgwQWvbUnTnfAPlEayNqnJpXXtFHOJwFFrpUSQMtPBtmmsUdNKSqEusinFsclKGYBVRblIftVtSSYusDSgYdeUJknwUBnQelGcymbuBvdtKHJsJTlfKJekkZzg"                                                          # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"                                                                                                                                                             # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.queuedForSubmissionCount" is "1"                                                                                                                                                  # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And I send a HTTP POST request to "payment_submission/submit"                                                                                                                                                                           # com.currencycloud.bdd.steps.HTTPSteps.sendHTTPPostRequest(java.lang.String)
  And "/payment" is called on the LHV Service                                                                                                                                                                                             # com.currencycloud.bdd.steps.WireMockSteps.assertURI(java.lang.String)
  And the XML request has "/Document/CstmrCdtTrfInitn/PmtInf/CdtTrfTxInf/Cdtr/Nm" equal to "Jeff qojJLPwOQrQoYmRWwsPvgwQWvbUnTnfAPlEayNqnJpXXtFHOJwFFrpUSQMtPBtmmsUdNKSqEusinFsclKGYBVRblIftVtSSYusDSgYdeUJknwUBnQelGcymbuBvdtKHJsJTlfKJ" # com.currencycloud.bdd.steps.WireMockSteps.assertXPath(java.lang.String,java.lang.String)

@sanitisation
Scenario Outline: Sanitisation of message values: beneficiaryAddress is truncate to 70                                                                                          # src/test/resources/features/Sanitisation.feature:38
  Given the XML namespace "urn:iso:std:iso:20022:tech:xsd:pain.001.001.03"                                                                                                      # com.currencycloud.bdd.steps.WireMockSteps.setDefaultNamespace(java.lang.String)
  And "paymentQueue" is "payment_provider_lhv.payment_submission"                                                                                                               # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  Given "beneficiaryAddress" is "vDsPfVfSJrYOTNUHHytBwiZcNHMiMhkORSJZuxQGmCTiEtKdWZYMLKRSnmtXYIyITvXpjQs"                                                                       # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"                                                                                                   # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.queuedForSubmissionCount" is "1"                                                                                        # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And I send a HTTP POST request to "payment_submission/submit"                                                                                                                 # com.currencycloud.bdd.steps.HTTPSteps.sendHTTPPostRequest(java.lang.String)
  And "/payment" is called on the LHV Service                                                                                                                                   # com.currencycloud.bdd.steps.WireMockSteps.assertURI(java.lang.String)
  And the XML request has "/Document/CstmrCdtTrfInitn/PmtInf/CdtTrfTxInf/Cdtr/PstlAdr/StrtNm" equal to "vDsPfVfSJrYOTNUHHytBwiZcNHMiMhkORSJZuxQGmCTiEtKdWZYMLKRSnmtXYIyITvXpjQ" # com.currencycloud.bdd.steps.WireMockSteps.assertXPath(java.lang.String,java.lang.String)

@sanitisation
Scenario Outline: Sanitisation of message values: beneficiaryCity is truncate to 35                                                         # src/test/resources/features/Sanitisation.feature:39
  Given the XML namespace "urn:iso:std:iso:20022:tech:xsd:pain.001.001.03"                                                                  # com.currencycloud.bdd.steps.WireMockSteps.setDefaultNamespace(java.lang.String)
  And "paymentQueue" is "payment_provider_lhv.payment_submission"                                                                           # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  Given "beneficiaryCity" is "RNPnkHHDlJbvpdzJJYYZByWgwUGXOQAdrDKH"                                                                         # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"                                                               # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.queuedForSubmissionCount" is "1"                                                    # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And I send a HTTP POST request to "payment_submission/submit"                                                                             # com.currencycloud.bdd.steps.HTTPSteps.sendHTTPPostRequest(java.lang.String)
  And "/payment" is called on the LHV Service                                                                                               # com.currencycloud.bdd.steps.WireMockSteps.assertURI(java.lang.String)
  And the XML request has "/Document/CstmrCdtTrfInitn/PmtInf/CdtTrfTxInf/Cdtr/PstlAdr/TwnNm" equal to "RNPnkHHDlJbvpdzJJYYZByWgwUGXOQAdrDK" # com.currencycloud.bdd.steps.WireMockSteps.assertXPath(java.lang.String,java.lang.String)

@sanitisation
Scenario Outline: Sanitisation of message values: beneficiaryCountryCode is truncate to 2                 # src/test/resources/features/Sanitisation.feature:40
  Given the XML namespace "urn:iso:std:iso:20022:tech:xsd:pain.001.001.03"                                # com.currencycloud.bdd.steps.WireMockSteps.setDefaultNamespace(java.lang.String)
  And "paymentQueue" is "payment_provider_lhv.payment_submission"                                         # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  Given "beneficiaryCountryCode" is "CAP"                                                                 # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"                             # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.queuedForSubmissionCount" is "1"                  # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And I send a HTTP POST request to "payment_submission/submit"                                           # com.currencycloud.bdd.steps.HTTPSteps.sendHTTPPostRequest(java.lang.String)
  And "/payment" is called on the LHV Service                                                             # com.currencycloud.bdd.steps.WireMockSteps.assertURI(java.lang.String)
  And the XML request has "/Document/CstmrCdtTrfInitn/PmtInf/CdtTrfTxInf/Cdtr/PstlAdr/Ctry" equal to "CA" # com.currencycloud.bdd.steps.WireMockSteps.assertXPath(java.lang.String,java.lang.String)

@sanitisation
Scenario Outline: Sanitisation of message values: beneficiaryCountryCode is uppercased                    # src/test/resources/features/Sanitisation.feature:41
  Given the XML namespace "urn:iso:std:iso:20022:tech:xsd:pain.001.001.03"                                # com.currencycloud.bdd.steps.WireMockSteps.setDefaultNamespace(java.lang.String)
  And "paymentQueue" is "payment_provider_lhv.payment_submission"                                         # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  Given "beneficiaryCountryCode" is "ca"                                                                  # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"                             # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.queuedForSubmissionCount" is "1"                  # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And I send a HTTP POST request to "payment_submission/submit"                                           # com.currencycloud.bdd.steps.HTTPSteps.sendHTTPPostRequest(java.lang.String)
  And "/payment" is called on the LHV Service                                                             # com.currencycloud.bdd.steps.WireMockSteps.assertURI(java.lang.String)
  And the XML request has "/Document/CstmrCdtTrfInitn/PmtInf/CdtTrfTxInf/Cdtr/PstlAdr/Ctry" equal to "CA" # com.currencycloud.bdd.steps.WireMockSteps.assertXPath(java.lang.String,java.lang.String)

@sanitisation
Scenario Outline: Sanitisation of message values: beneficiaryBankIban is truncate to 34                                                  # src/test/resources/features/Sanitisation.feature:42
  Given the XML namespace "urn:iso:std:iso:20022:tech:xsd:pain.001.001.03"                                                               # com.currencycloud.bdd.steps.WireMockSteps.setDefaultNamespace(java.lang.String)
  And "paymentQueue" is "payment_provider_lhv.payment_submission"                                                                        # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  Given "beneficiaryBankIban" is "PL461050008610000090319541690123456"                                                                   # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"                                                            # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.queuedForSubmissionCount" is "1"                                                 # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And I send a HTTP POST request to "payment_submission/submit"                                                                          # com.currencycloud.bdd.steps.HTTPSteps.sendHTTPPostRequest(java.lang.String)
  And "/payment" is called on the LHV Service                                                                                            # com.currencycloud.bdd.steps.WireMockSteps.assertURI(java.lang.String)
  And the XML request has "/Document/CstmrCdtTrfInitn/PmtInf/CdtTrfTxInf/CdtrAcct/Id/IBAN" equal to "PL46105000861000009031954169012345" # com.currencycloud.bdd.steps.WireMockSteps.assertXPath(java.lang.String,java.lang.String)

@sanitisation
Scenario Outline: Sanitisation of message values: beneficiaryPostcode is truncate to 16                                  # src/test/resources/features/Sanitisation.feature:43
  Given the XML namespace "urn:iso:std:iso:20022:tech:xsd:pain.001.001.03"                                               # com.currencycloud.bdd.steps.WireMockSteps.setDefaultNamespace(java.lang.String)
  And "paymentQueue" is "payment_provider_lhv.payment_submission"                                                        # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  Given "beneficiaryPostcode" is "12345678912345678"                                                                     # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"                                            # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.queuedForSubmissionCount" is "1"                                 # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And I send a HTTP POST request to "payment_submission/submit"                                                          # com.currencycloud.bdd.steps.HTTPSteps.sendHTTPPostRequest(java.lang.String)
  And "/payment" is called on the LHV Service                                                                            # com.currencycloud.bdd.steps.WireMockSteps.assertURI(java.lang.String)
  And the XML request has "/Document/CstmrCdtTrfInitn/PmtInf/CdtTrfTxInf/Cdtr/PstlAdr/PstCd" equal to "1234567891234567" # com.currencycloud.bdd.steps.WireMockSteps.assertXPath(java.lang.String,java.lang.String)

Scenario: Status Endpoint Request                          # src/test/resources/features/Status.feature:3
  When I send a HTTP request to "status"                   # com.currencycloud.bdd.steps.HTTPSteps.sendHTTPRequest(java.lang.String)
  Then the status code is 200                              # com.currencycloud.bdd.steps.HTTPSteps.assertStatusCode(int)
  And the response header Content-Type is application/json # com.currencycloud.bdd.steps.HTTPSteps.assertHeader(java.lang.String,java.lang.String)
  And the response body is '{"status":"ok"}'               # com.currencycloud.bdd.steps.HTTPSteps.assertResponseBody(java.lang.String)

Scenario: Assert payment status is updated from Submitted to Complete status                                          # src/test/resources/features/StatusUpdate.feature:19
  Given the XML namespace "urn:iso:std:iso:20022:tech:xsd:pain.001.001.03"                                            # com.currencycloud.bdd.steps.WireMockSteps.setDefaultNamespace(java.lang.String)
  And "paymentQueue" is "payment_provider_lhv.payment_submission"                                                     # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  And "ackQueue" is "payment_provider_lhv.payment_status_ack"                                                         # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"                                         # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.queuedForSubmissionCount" is "1"                              # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And I send a HTTP POST request to "payment_submission/submit"                                                       # com.currencycloud.bdd.steps.HTTPSteps.sendHTTPPostRequest(java.lang.String)
  Then I send a HTTP request to "payment_summary"                                                                     # com.currencycloud.bdd.steps.HTTPSteps.sendHTTPRequest(java.lang.String)
  And I wait until "payment_submission" returns JSON "$.submittedCount" is "1"                                        # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And the JSON response body is                                                                                       # com.currencycloud.bdd.steps.HTTPSteps.assertJSONResponseBody(io.cucumber.datatable.DataTable)
  And I put the message '{"short_reference": "000001-BDTEST999", "status": "Test", "ackQueue": "Test"}' on "ackQueue" # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessage(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.completeCount" is "1"                                         # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And the JSON response body is                                                                                       # com.currencycloud.bdd.steps.HTTPSteps.assertJSONResponseBody(io.cucumber.datatable.DataTable)

Scenario: I provide an invalid JSON object to the payments engine, Payment status should not change to complete      # src/test/resources/features/StatusUpdate.feature:26
  Given the XML namespace "urn:iso:std:iso:20022:tech:xsd:pain.001.001.03"                                           # com.currencycloud.bdd.steps.WireMockSteps.setDefaultNamespace(java.lang.String)
  And "paymentQueue" is "payment_provider_lhv.payment_submission"                                                    # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  And "ackQueue" is "payment_provider_lhv.payment_status_ack"                                                        # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"                                        # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.queuedForSubmissionCount" is "1"                             # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And I send a HTTP POST request to "payment_submission/submit"                                                      # com.currencycloud.bdd.steps.HTTPSteps.sendHTTPPostRequest(java.lang.String)
  Then I send a HTTP request to "payment_summary"                                                                    # com.currencycloud.bdd.steps.HTTPSteps.sendHTTPRequest(java.lang.String)
  And I wait until "payment_submission" returns JSON "$.submittedCount" is "1"                                       # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And the JSON response body is                                                                                      # com.currencycloud.bdd.steps.HTTPSteps.assertJSONResponseBody(io.cucumber.datatable.DataTable)
  And I put the message '"short_reference": "000001-BDTEST999", "status": "Test", "ackQueue": "Test"}' on "ackQueue" # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessage(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.submittedCount" is "1"                                       # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And the JSON response body is                                                                                      # com.currencycloud.bdd.steps.HTTPSteps.assertJSONResponseBody(io.cucumber.datatable.DataTable)

@submit
Scenario: No Payment submission                                                                  # src/test/resources/features/Submit.feature:9
  Given the XML namespace "urn:iso:std:iso:20022:tech:xsd:pain.001.001.03"                       # com.currencycloud.bdd.steps.WireMockSteps.setDefaultNamespace(java.lang.String)
  And "paymentQueue" is "payment_provider_lhv.payment_submission"                                # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  And "paymentShortReference" starts at 1 with the format "%06d"                                 # com.currencycloud.bdd.steps.VariableSteps.createIncementor(java.lang.String,int,java.lang.String)
  When I send a HTTP POST request to "payment_submission/submit"                                 # com.currencycloud.bdd.steps.HTTPSteps.sendHTTPPostRequest(java.lang.String)
  Then the status code is 200                                                                    # com.currencycloud.bdd.steps.HTTPSteps.assertStatusCode(int)
  And the response header Content-Type is application/json                                       # com.currencycloud.bdd.steps.HTTPSteps.assertHeader(java.lang.String,java.lang.String)
  And the response body is '{"status":"success","message":"0 batches of 0 have been submitted"}' # com.currencycloud.bdd.steps.HTTPSteps.assertResponseBody(java.lang.String)

@submit @LHV-114 @smoke
Scenario: One payment submission                                                                                        # src/test/resources/features/Submit.feature:17
  Given the XML namespace "urn:iso:std:iso:20022:tech:xsd:pain.001.001.03"                                              # com.currencycloud.bdd.steps.WireMockSteps.setDefaultNamespace(java.lang.String)
  And "paymentQueue" is "payment_provider_lhv.payment_submission"                                                       # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  And "paymentShortReference" starts at 1 with the format "%06d"                                                        # com.currencycloud.bdd.steps.VariableSteps.createIncementor(java.lang.String,int,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"                                           # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.queuedForSubmissionCount" is "1"                                # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And I send a HTTP POST request to "payment_submission/submit"                                                         # com.currencycloud.bdd.steps.HTTPSteps.sendHTTPPostRequest(java.lang.String)
  Then the status code is 200                                                                                           # com.currencycloud.bdd.steps.HTTPSteps.assertStatusCode(int)
  And the response header Content-Type is application/json                                                              # com.currencycloud.bdd.steps.HTTPSteps.assertHeader(java.lang.String,java.lang.String)
  And the response body is '{"status":"success","message":"1 batches of 1 have been submitted"}'                        # com.currencycloud.bdd.steps.HTTPSteps.assertResponseBody(java.lang.String)
  And "/payment" is called on the LHV Service                                                                           # com.currencycloud.bdd.steps.WireMockSteps.assertURI(java.lang.String)
  And the XML request "/Document/CstmrCdtTrfInitn/PmtInf/ReqdExctnDt " matches "\d{4}-\d{2}-\d{2}"                      # com.currencycloud.bdd.steps.WireMockSteps.assertXPathMatches(java.lang.String,java.lang.String)
  And the XML request "/Document/CstmrCdtTrfInitn/GrpHdr/MsgId" matches "LHV_\d{6}_\d{6}\.xml"                          # com.currencycloud.bdd.steps.WireMockSteps.assertXPathMatches(java.lang.String,java.lang.String)
  And the XML request "/Document/CstmrCdtTrfInitn/GrpHdr/CreDtTm" matches "\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}Z" # com.currencycloud.bdd.steps.WireMockSteps.assertXPathMatches(java.lang.String,java.lang.String)
  And the XML request has                                                                                               # com.currencycloud.bdd.steps.WireMockSteps.assertXPath(io.cucumber.datatable.DataTable)
  And the JSON message from the "payments_engine.payment_status_update" queue is                                        # com.currencycloud.bdd.steps.AMQPSteps.assertMessage(java.lang.String,io.cucumber.datatable.DataTable)

@submit @LHV-113
Scenario: 1500 batching payment submission test                                                                # src/test/resources/features/Submit.feature:61
  Given the XML namespace "urn:iso:std:iso:20022:tech:xsd:pain.001.001.03"                                     # com.currencycloud.bdd.steps.WireMockSteps.setDefaultNamespace(java.lang.String)
  And "paymentQueue" is "payment_provider_lhv.payment_submission"                                              # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  And "paymentShortReference" starts at 1 with the format "%06d"                                               # com.currencycloud.bdd.steps.VariableSteps.createIncementor(java.lang.String,int,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue" 1500 times                       # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String,int)
  And I wait until "payment_submission" returns JSON "$.queuedForSubmissionCount" is "1500"                    # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And I send a HTTP POST request to "payment_submission/submit"                                                # com.currencycloud.bdd.steps.HTTPSteps.sendHTTPPostRequest(java.lang.String)
  Then the status code is 200                                                                                  # com.currencycloud.bdd.steps.HTTPSteps.assertStatusCode(int)
  And the response header Content-Type is application/json                                                     # com.currencycloud.bdd.steps.HTTPSteps.assertHeader(java.lang.String,java.lang.String)
  And the response body is '{"status":"success","message":"1 batches of 1500 have been submitted"}'            # com.currencycloud.bdd.steps.HTTPSteps.assertResponseBody(java.lang.String)
  And "/payment" is called on the LHV Service                                                                  # com.currencycloud.bdd.steps.WireMockSteps.assertURI(java.lang.String)
  And the XML request contains element "/Document/CstmrCdtTrfInitn/PmtInf/CdtTrfTxInf" which occurs 1500 times # com.currencycloud.bdd.steps.WireMockSteps.assertElementCount(java.lang.String,int)
  And the XML request has                                                                                      # com.currencycloud.bdd.steps.WireMockSteps.assertXPath(io.cucumber.datatable.DataTable)

@submit @LHV-112
Scenario: 1501 boundary batching payment submission test                                                     # src/test/resources/features/Submit.feature:78
  Given the XML namespace "urn:iso:std:iso:20022:tech:xsd:pain.001.001.03"                                   # com.currencycloud.bdd.steps.WireMockSteps.setDefaultNamespace(java.lang.String)
  And "paymentQueue" is "payment_provider_lhv.payment_submission"                                            # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  And "paymentShortReference" starts at 1 with the format "%06d"                                             # com.currencycloud.bdd.steps.VariableSteps.createIncementor(java.lang.String,int,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue" 1501 times                     # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String,int)
  And I wait until "payment_submission" returns JSON "$.queuedForSubmissionCount" is "1501"                  # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And I send a HTTP POST request to "payment_submission/submit"                                              # com.currencycloud.bdd.steps.HTTPSteps.sendHTTPPostRequest(java.lang.String)
  Then the status code is 200                                                                                # com.currencycloud.bdd.steps.HTTPSteps.assertStatusCode(int)
  And the response header Content-Type is application/json                                                   # com.currencycloud.bdd.steps.HTTPSteps.assertHeader(java.lang.String,java.lang.String)
  And the response body is '{"status":"success","message":"2 batches of 1501 have been submitted"}'          # com.currencycloud.bdd.steps.HTTPSteps.assertResponseBody(java.lang.String)
  And "/payment" is called on the LHV Service 2 times                                                        # com.currencycloud.bdd.steps.WireMockSteps.assertURI(java.lang.String,int)
  And XML request 1 contains element "/Document/CstmrCdtTrfInitn/PmtInf/CdtTrfTxInf" which occurs 1500 times # com.currencycloud.bdd.steps.WireMockSteps.assertElementCount(int,java.lang.String,int)
  And XML request 2 contains element "/Document/CstmrCdtTrfInitn/PmtInf/CdtTrfTxInf" which occurs 1 time     # com.currencycloud.bdd.steps.WireMockSteps.assertElementCount(int,java.lang.String,int)

@submit @LHV-116
Scenario: LHV returns 429 code                                                           # src/test/resources/features/Submit.feature:90
  Given the XML namespace "urn:iso:std:iso:20022:tech:xsd:pain.001.001.03"               # com.currencycloud.bdd.steps.WireMockSteps.setDefaultNamespace(java.lang.String)
  And "paymentQueue" is "payment_provider_lhv.payment_submission"                        # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  And "paymentShortReference" starts at 1 with the format "%06d"                         # com.currencycloud.bdd.steps.VariableSteps.createIncementor(java.lang.String,int,java.lang.String)
  Given "paymentShortReference" is "429001"                                              # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"            # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.queuedForSubmissionCount" is "1" # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And I send a HTTP POST request to "payment_submission/submit"                          # com.currencycloud.bdd.steps.HTTPSteps.sendHTTPPostRequest(java.lang.String)
  Then the status code is 422                                                            # com.currencycloud.bdd.steps.HTTPSteps.assertStatusCode(int)
  And the JSON response body is                                                          # com.currencycloud.bdd.steps.HTTPSteps.assertJSONResponseBody(io.cucumber.datatable.DataTable)

@submit @LHV-117
Scenario: LHV returns 500 code                                                           # src/test/resources/features/Submit.feature:101
  Given the XML namespace "urn:iso:std:iso:20022:tech:xsd:pain.001.001.03"               # com.currencycloud.bdd.steps.WireMockSteps.setDefaultNamespace(java.lang.String)
  And "paymentQueue" is "payment_provider_lhv.payment_submission"                        # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  And "paymentShortReference" starts at 1 with the format "%06d"                         # com.currencycloud.bdd.steps.VariableSteps.createIncementor(java.lang.String,int,java.lang.String)
  Given "paymentShortReference" is "500001"                                              # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"            # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.queuedForSubmissionCount" is "1" # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And I send a HTTP POST request to "payment_submission/submit"                          # com.currencycloud.bdd.steps.HTTPSteps.sendHTTPPostRequest(java.lang.String)
  Then the status code is 422                                                            # com.currencycloud.bdd.steps.HTTPSteps.assertStatusCode(int)
  And the JSON response body is                                                          # com.currencycloud.bdd.steps.HTTPSteps.assertJSONResponseBody(io.cucumber.datatable.DataTable)

@submit @LHV-118
Scenario: LHV returns 403 code                                                           # src/test/resources/features/Submit.feature:112
  Given the XML namespace "urn:iso:std:iso:20022:tech:xsd:pain.001.001.03"               # com.currencycloud.bdd.steps.WireMockSteps.setDefaultNamespace(java.lang.String)
  And "paymentQueue" is "payment_provider_lhv.payment_submission"                        # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  And "paymentShortReference" starts at 1 with the format "%06d"                         # com.currencycloud.bdd.steps.VariableSteps.createIncementor(java.lang.String,int,java.lang.String)
  Given "paymentShortReference" is "403001"                                              # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"            # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.queuedForSubmissionCount" is "1" # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And I send a HTTP POST request to "payment_submission/submit"                          # com.currencycloud.bdd.steps.HTTPSteps.sendHTTPPostRequest(java.lang.String)
  Then the status code is 422                                                            # com.currencycloud.bdd.steps.HTTPSteps.assertStatusCode(int)
  And the JSON response body is                                                          # com.currencycloud.bdd.steps.HTTPSteps.assertJSONResponseBody(io.cucumber.datatable.DataTable)

@submit @LHV-119
Scenario: LHV returns 503 code                                                           # src/test/resources/features/Submit.feature:123
  Given the XML namespace "urn:iso:std:iso:20022:tech:xsd:pain.001.001.03"               # com.currencycloud.bdd.steps.WireMockSteps.setDefaultNamespace(java.lang.String)
  And "paymentQueue" is "payment_provider_lhv.payment_submission"                        # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  And "paymentShortReference" starts at 1 with the format "%06d"                         # com.currencycloud.bdd.steps.VariableSteps.createIncementor(java.lang.String,int,java.lang.String)
  Given "paymentShortReference" is "503001"                                              # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"            # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.queuedForSubmissionCount" is "1" # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And I send a HTTP POST request to "payment_submission/submit"                          # com.currencycloud.bdd.steps.HTTPSteps.sendHTTPPostRequest(java.lang.String)
  Then the status code is 422                                                            # com.currencycloud.bdd.steps.HTTPSteps.assertStatusCode(int)
  And the JSON response body is                                                          # com.currencycloud.bdd.steps.HTTPSteps.assertJSONResponseBody(io.cucumber.datatable.DataTable)

@submit @LHV-120
Scenario: Invalid response from LHV                                                      # src/test/resources/features/Submit.feature:134
  Given the XML namespace "urn:iso:std:iso:20022:tech:xsd:pain.001.001.03"               # com.currencycloud.bdd.steps.WireMockSteps.setDefaultNamespace(java.lang.String)
  And "paymentQueue" is "payment_provider_lhv.payment_submission"                        # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  And "paymentShortReference" starts at 1 with the format "%06d"                         # com.currencycloud.bdd.steps.VariableSteps.createIncementor(java.lang.String,int,java.lang.String)
  Given "paymentShortReference" is "900001"                                              # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"            # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.queuedForSubmissionCount" is "1" # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And I send a HTTP POST request to "payment_submission/submit"                          # com.currencycloud.bdd.steps.HTTPSteps.sendHTTPPostRequest(java.lang.String)
  Then the status code is 422                                                            # com.currencycloud.bdd.steps.HTTPSteps.assertStatusCode(int)
  And the JSON response body is                                                          # com.currencycloud.bdd.steps.HTTPSteps.assertJSONResponseBody(io.cucumber.datatable.DataTable)

@submit @LHV-121
Scenario: Multiple calls to submit endpoint (Concurrency)                      # src/test/resources/features/Submit.feature:145
  Given the XML namespace "urn:iso:std:iso:20022:tech:xsd:pain.001.001.03"     # com.currencycloud.bdd.steps.WireMockSteps.setDefaultNamespace(java.lang.String)
  And "paymentQueue" is "payment_provider_lhv.payment_submission"              # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  And "paymentShortReference" starts at 1 with the format "%06d"               # com.currencycloud.bdd.steps.VariableSteps.createIncementor(java.lang.String,int,java.lang.String)
  Given "paymentShortReference" starts at 901001                               # com.currencycloud.bdd.steps.VariableSteps.createIncementor(java.lang.String,int)
  When I put the message from file "payment.json" on the queue "paymentQueue"  # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait for 3 seconds                                                     # com.currencycloud.bdd.steps.AMQPSteps.wait(int)
  And I send a HTTP POST request to "payment_submission/submit" asynchronously # com.currencycloud.bdd.steps.HTTPSteps.sendHTTPPostRequestAsync(java.lang.String)
  And I put the message from file "payment.json" on the queue "paymentQueue"   # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait for 3 seconds                                                     # com.currencycloud.bdd.steps.AMQPSteps.wait(int)
  And I send a HTTP POST request to "payment_submission/submit"                # com.currencycloud.bdd.steps.HTTPSteps.sendHTTPPostRequest(java.lang.String)
  Then the status code is 422                                                  # com.currencycloud.bdd.steps.HTTPSteps.assertStatusCode(int)
  And the JSON response body is                                                # com.currencycloud.bdd.steps.HTTPSteps.assertJSONResponseBody(io.cucumber.datatable.DataTable)
  And I wait for 20 seconds                                                    # com.currencycloud.bdd.steps.AMQPSteps.wait(int)

@submit @LHV-63
Scenario: Submitted payment set to SUMBITTED status                                      # src/test/resources/features/Submit.feature:160
  Given the XML namespace "urn:iso:std:iso:20022:tech:xsd:pain.001.001.03"               # com.currencycloud.bdd.steps.WireMockSteps.setDefaultNamespace(java.lang.String)
  And "paymentQueue" is "payment_provider_lhv.payment_submission"                        # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  And "paymentShortReference" starts at 1 with the format "%06d"                         # com.currencycloud.bdd.steps.VariableSteps.createIncementor(java.lang.String,int,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"            # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.queuedForSubmissionCount" is "1" # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And I send a HTTP POST request to "payment_submission/submit"                          # com.currencycloud.bdd.steps.HTTPSteps.sendHTTPPostRequest(java.lang.String)
  And I send a HTTP request to "payment_submission"                                      # com.currencycloud.bdd.steps.HTTPSteps.sendHTTPRequest(java.lang.String)
  And the JSON response body is                                                          # com.currencycloud.bdd.steps.HTTPSteps.assertJSONResponseBody(io.cucumber.datatable.DataTable)

@submit @LHV-111
Scenario: Payment grouping based on value date                                           # src/test/resources/features/Submit.feature:169
  Given the XML namespace "urn:iso:std:iso:20022:tech:xsd:pain.001.001.03"               # com.currencycloud.bdd.steps.WireMockSteps.setDefaultNamespace(java.lang.String)
  And "paymentQueue" is "payment_provider_lhv.payment_submission"                        # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  And "paymentShortReference" starts at 1 with the format "%06d"                         # com.currencycloud.bdd.steps.VariableSteps.createIncementor(java.lang.String,int,java.lang.String)
  When "paymentValueDate" is "2020-06-23"                                                # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  And I put the message from file "payment.json" on the queue "paymentQueue"             # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.queuedForSubmissionCount" is "1" # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And "paymentValueDate" is "2020-06-24"                                                 # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  And I put the message from file "payment.json" on the queue "paymentQueue"             # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.queuedForSubmissionCount" is "2" # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And "paymentValueDate" is "2020-06-25"                                                 # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  And I put the message from file "payment.json" on the queue "paymentQueue"             # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.queuedForSubmissionCount" is "3" # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And I send a HTTP POST request to "payment_submission/submit"                          # com.currencycloud.bdd.steps.HTTPSteps.sendHTTPPostRequest(java.lang.String)
  And "/payment" is called on the LHV Service 3 times                                    # com.currencycloud.bdd.steps.WireMockSteps.assertURI(java.lang.String,int)
  And XML request 1 contains element value                                               # com.currencycloud.bdd.steps.WireMockSteps.assertElementInXML(int,io.cucumber.datatable.DataTable)
  And XML request 2 contains element value                                               # com.currencycloud.bdd.steps.WireMockSteps.assertElementInXML(int,io.cucumber.datatable.DataTable)
  And XML request 3 contains element value                                               # com.currencycloud.bdd.steps.WireMockSteps.assertElementInXML(int,io.cucumber.datatable.DataTable)

@submit @LHV-111
Scenario: 1502 payments grouping by boundary & Payment-value-date                           # src/test/resources/features/Submit.feature:189
  Given the XML namespace "urn:iso:std:iso:20022:tech:xsd:pain.001.001.03"                  # com.currencycloud.bdd.steps.WireMockSteps.setDefaultNamespace(java.lang.String)
  And "paymentQueue" is "payment_provider_lhv.payment_submission"                           # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  And "paymentShortReference" starts at 1 with the format "%06d"                            # com.currencycloud.bdd.steps.VariableSteps.createIncementor(java.lang.String,int,java.lang.String)
  When "paymentValueDate" is "2020-06-20"                                                   # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  And I put the message from file "payment.json" on the queue "paymentQueue" 1501 times     # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String,int)
  And I wait until "payment_submission" returns JSON "$.queuedForSubmissionCount" is "1501" # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And "paymentValueDate" is "2020-06-21"                                                    # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  And I put the message from file "payment.json" on the queue "paymentQueue"                # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.queuedForSubmissionCount" is "1502" # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And I send a HTTP POST request to "payment_submission/submit"                             # com.currencycloud.bdd.steps.HTTPSteps.sendHTTPPostRequest(java.lang.String)
  And "/payment" is called on the LHV Service 3 times                                       # com.currencycloud.bdd.steps.WireMockSteps.assertURI(java.lang.String,int)
  And XML request 1 contains element value                                                  # com.currencycloud.bdd.steps.WireMockSteps.assertElementInXML(int,io.cucumber.datatable.DataTable)
  And XML request 2 contains element value                                                  # com.currencycloud.bdd.steps.WireMockSteps.assertElementInXML(int,io.cucumber.datatable.DataTable)
  And XML request 3 contains element value                                                  # com.currencycloud.bdd.steps.WireMockSteps.assertElementInXML(int,io.cucumber.datatable.DataTable)

@submit @LHV-110
Scenario: Assert Unique Identifier on payment file                                       # src/test/resources/features/Submit.feature:206
  Given the XML namespace "urn:iso:std:iso:20022:tech:xsd:pain.001.001.03"               # com.currencycloud.bdd.steps.WireMockSteps.setDefaultNamespace(java.lang.String)
  And "paymentQueue" is "payment_provider_lhv.payment_submission"                        # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  And "paymentShortReference" starts at 1 with the format "%06d"                         # com.currencycloud.bdd.steps.VariableSteps.createIncementor(java.lang.String,int,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"            # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.queuedForSubmissionCount" is "1" # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And I send a HTTP POST request to "payment_submission/submit"                          # com.currencycloud.bdd.steps.HTTPSteps.sendHTTPPostRequest(java.lang.String)
  And "/payment" is called on the LHV Service                                            # com.currencycloud.bdd.steps.WireMockSteps.assertURI(java.lang.String)
  Then the XML request "/Document/CstmrCdtTrfInitn/PmtInf/PmtInfId" matches "\S{1,35}"   # com.currencycloud.bdd.steps.WireMockSteps.assertXPathMatches(java.lang.String,java.lang.String)

@submit @LHV-110
Scenario: Assert potential for rollback after second batch submission failure            # src/test/resources/features/Submit.feature:214
  Given the XML namespace "urn:iso:std:iso:20022:tech:xsd:pain.001.001.03"               # com.currencycloud.bdd.steps.WireMockSteps.setDefaultNamespace(java.lang.String)
  And "paymentQueue" is "payment_provider_lhv.payment_submission"                        # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  And "paymentShortReference" starts at 1 with the format "%06d"                         # com.currencycloud.bdd.steps.VariableSteps.createIncementor(java.lang.String,int,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"            # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.queuedForSubmissionCount" is "1" # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  When "paymentShortReference" is "429001"                                               # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  And "paymentValueDate" is "2020-06-21"                                                 # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"            # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.queuedForSubmissionCount" is "2" # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And I send a HTTP POST request to "payment_submission/submit"                          # com.currencycloud.bdd.steps.HTTPSteps.sendHTTPPostRequest(java.lang.String)
  And the JSON response body is                                                          # com.currencycloud.bdd.steps.HTTPSteps.assertJSONResponseBody(io.cucumber.datatable.DataTable)
  And I send a HTTP request to "payment_submission"                                      # com.currencycloud.bdd.steps.HTTPSteps.sendHTTPRequest(java.lang.String)
  And the JSON response body is                                                          # com.currencycloud.bdd.steps.HTTPSteps.assertJSONResponseBody(io.cucumber.datatable.DataTable)

@validation
Scenario: Duplicate ID                                                                   # src/test/resources/features/Validation.feature:7
  Given "paymentQueue" is "payment_provider_lhv.payment_submission"                      # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"            # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I put the message from file "payment.json" on the queue "paymentQueue"             # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.queuedForSubmissionCount" is "1" # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  Then the JSON message from the "dead_letter_queue" queue is                            # com.currencycloud.bdd.steps.AMQPSteps.assertMessage(java.lang.String,io.cucumber.datatable.DataTable)

@validation
Scenario Outline: Invalid field entries: paymentAmount with value 8.000001       # src/test/resources/features/Validation.feature:24
  Given "paymentQueue" is "payment_provider_lhv.payment_submission"              # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  Given "paymentAmount" is "8.000001"                                            # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"    # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.failedCount" is "1"      # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And the JSON message from the "payments_engine.payment_status_update" queue is # com.currencycloud.bdd.steps.AMQPSteps.assertMessage(java.lang.String,io.cucumber.datatable.DataTable)

@validation
Scenario Outline: Invalid field entries: paymentAmount with value 80000000000000000000001 # src/test/resources/features/Validation.feature:25
  Given "paymentQueue" is "payment_provider_lhv.payment_submission"                       # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  Given "paymentAmount" is "80000000000000000000001"                                      # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"             # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.failedCount" is "1"               # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And the JSON message from the "payments_engine.payment_status_update" queue is          # com.currencycloud.bdd.steps.AMQPSteps.assertMessage(java.lang.String,io.cucumber.datatable.DataTable)

@validation
Scenario Outline: Invalid field entries: paymentAmount with value -8             # src/test/resources/features/Validation.feature:26
  Given "paymentQueue" is "payment_provider_lhv.payment_submission"              # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  Given "paymentAmount" is "-8"                                                  # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"    # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.failedCount" is "1"      # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And the JSON message from the "payments_engine.payment_status_update" queue is # com.currencycloud.bdd.steps.AMQPSteps.assertMessage(java.lang.String,io.cucumber.datatable.DataTable)

@validation
Scenario Outline: Invalid field entries: paymentAmount with value 5834563453245.000056 # src/test/resources/features/Validation.feature:27
  Given "paymentQueue" is "payment_provider_lhv.payment_submission"                    # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  Given "paymentAmount" is "5834563453245.000056"                                      # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"          # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.failedCount" is "1"            # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And the JSON message from the "payments_engine.payment_status_update" queue is       # com.currencycloud.bdd.steps.AMQPSteps.assertMessage(java.lang.String,io.cucumber.datatable.DataTable)

@validation @LHV-123
Scenario Outline: Invalid field entries: providerIban with value 544324THISSHOULDERROR # src/test/resources/features/Validation.feature:32
  Given "paymentQueue" is "payment_provider_lhv.payment_submission"                    # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  Given "providerIban" is "544324THISSHOULDERROR"                                      # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"          # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.failedCount" is "1"            # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And the JSON message from the "payments_engine.payment_status_update" queue is       # com.currencycloud.bdd.steps.AMQPSteps.assertMessage(java.lang.String,io.cucumber.datatable.DataTable)

@validation @LHV-124
Scenario Outline: Invalid field entries: paymentProvCountryCode with value F     # src/test/resources/features/Validation.feature:37
  Given "paymentQueue" is "payment_provider_lhv.payment_submission"              # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  Given "paymentProvCountryCode" is "F"                                          # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"    # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.failedCount" is "1"      # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And the JSON message from the "payments_engine.payment_status_update" queue is # com.currencycloud.bdd.steps.AMQPSteps.assertMessage(java.lang.String,io.cucumber.datatable.DataTable)

@validation @LHV-124
Scenario Outline: Invalid field entries: paymentProvCountryCode with value 123   # src/test/resources/features/Validation.feature:38
  Given "paymentQueue" is "payment_provider_lhv.payment_submission"              # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  Given "paymentProvCountryCode" is "123"                                        # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"    # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.failedCount" is "1"      # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And the JSON message from the "payments_engine.payment_status_update" queue is # com.currencycloud.bdd.steps.AMQPSteps.assertMessage(java.lang.String,io.cucumber.datatable.DataTable)

@validation
Scenario Outline: Invalid field entries: providerBankCountryCode with value F    # src/test/resources/features/Validation.feature:41
  Given "paymentQueue" is "payment_provider_lhv.payment_submission"              # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  Given "providerBankCountryCode" is "F"                                         # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"    # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.failedCount" is "1"      # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And the JSON message from the "payments_engine.payment_status_update" queue is # com.currencycloud.bdd.steps.AMQPSteps.assertMessage(java.lang.String,io.cucumber.datatable.DataTable)

@validation
Scenario Outline: Invalid field entries: providerBankCountryCode with value 123  # src/test/resources/features/Validation.feature:42
  Given "paymentQueue" is "payment_provider_lhv.payment_submission"              # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  Given "providerBankCountryCode" is "123"                                       # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"    # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.failedCount" is "1"      # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And the JSON message from the "payments_engine.payment_status_update" queue is # com.currencycloud.bdd.steps.AMQPSteps.assertMessage(java.lang.String,io.cucumber.datatable.DataTable)

@validation @LHV-125
Scenario Outline: Invalid field entries: paymentProviderBicSwift with value 1BICSWIFT # src/test/resources/features/Validation.feature:47
  Given "paymentQueue" is "payment_provider_lhv.payment_submission"                   # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  Given "paymentProviderBicSwift" is "1BICSWIFT"                                      # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"         # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.failedCount" is "1"           # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And the JSON message from the "payments_engine.payment_status_update" queue is      # com.currencycloud.bdd.steps.AMQPSteps.assertMessage(java.lang.String,io.cucumber.datatable.DataTable)

@validation @LHV-126
Scenario Outline: Invalid field entries: beneficiaryBankIban with value 734324THISSHOULDERROR # src/test/resources/features/Validation.feature:52
  Given "paymentQueue" is "payment_provider_lhv.payment_submission"                           # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  Given "beneficiaryBankIban" is "734324THISSHOULDERROR"                                      # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"                 # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.failedCount" is "1"                   # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And the JSON message from the "payments_engine.payment_status_update" queue is              # com.currencycloud.bdd.steps.AMQPSteps.assertMessage(java.lang.String,io.cucumber.datatable.DataTable)

@validation @LHV-127
Scenario Outline: Invalid field entries: beneficiaryBankBicSwift with value 2BICSWIFT # src/test/resources/features/Validation.feature:57
  Given "paymentQueue" is "payment_provider_lhv.payment_submission"                   # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  Given "beneficiaryBankBicSwift" is "2BICSWIFT"                                      # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"         # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.failedCount" is "1"           # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And the JSON message from the "payments_engine.payment_status_update" queue is      # com.currencycloud.bdd.steps.AMQPSteps.assertMessage(java.lang.String,io.cucumber.datatable.DataTable)

@validation @LHV-128
Scenario Outline: Invalid field entries: paymentValueDate with value text        # src/test/resources/features/Validation.feature:62
  Given "paymentQueue" is "payment_provider_lhv.payment_submission"              # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  Given "paymentValueDate" is "text"                                             # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"    # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.failedCount" is "1"      # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And the JSON message from the "payments_engine.payment_status_update" queue is # com.currencycloud.bdd.steps.AMQPSteps.assertMessage(java.lang.String,io.cucumber.datatable.DataTable)

@validation @LHV-128
Scenario Outline: Invalid field entries: paymentValueDate with value 20202-111-333 # src/test/resources/features/Validation.feature:63
  Given "paymentQueue" is "payment_provider_lhv.payment_submission"                # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  Given "paymentValueDate" is "20202-111-333"                                      # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"      # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.failedCount" is "1"        # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And the JSON message from the "payments_engine.payment_status_update" queue is   # com.currencycloud.bdd.steps.AMQPSteps.assertMessage(java.lang.String,io.cucumber.datatable.DataTable)

@validation @LHV-128
Scenario Outline: Invalid field entries: paymentValueDate with value             # src/test/resources/features/Validation.feature:64
  Given "paymentQueue" is "payment_provider_lhv.payment_submission"              # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  Given "paymentValueDate" is ""                                                 # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"    # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.failedCount" is "1"      # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And the JSON message from the "payments_engine.payment_status_update" queue is # com.currencycloud.bdd.steps.AMQPSteps.assertMessage(java.lang.String,io.cucumber.datatable.DataTable)

@validation @LHV-128
Scenario Outline: Invalid field entries: paymentValueDate with value 20th March 2020 # src/test/resources/features/Validation.feature:65
  Given "paymentQueue" is "payment_provider_lhv.payment_submission"                  # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  Given "paymentValueDate" is "20th March 2020"                                      # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"        # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.failedCount" is "1"          # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And the JSON message from the "payments_engine.payment_status_update" queue is     # com.currencycloud.bdd.steps.AMQPSteps.assertMessage(java.lang.String,io.cucumber.datatable.DataTable)

@validation @LHV-128
Scenario Outline: Invalid field entries: paymentValueDate with value 01-01-1970  # src/test/resources/features/Validation.feature:66
  Given "paymentQueue" is "payment_provider_lhv.payment_submission"              # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  Given "paymentValueDate" is "01-01-1970"                                       # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"    # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.failedCount" is "1"      # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And the JSON message from the "payments_engine.payment_status_update" queue is # com.currencycloud.bdd.steps.AMQPSteps.assertMessage(java.lang.String,io.cucumber.datatable.DataTable)

@validation @LHV-128
Scenario Outline: Invalid field entries: paymentValueDate with value 20201010    # src/test/resources/features/Validation.feature:67
  Given "paymentQueue" is "payment_provider_lhv.payment_submission"              # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  Given "paymentValueDate" is "20201010"                                         # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"    # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.failedCount" is "1"      # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And the JSON message from the "payments_engine.payment_status_update" queue is # com.currencycloud.bdd.steps.AMQPSteps.assertMessage(java.lang.String,io.cucumber.datatable.DataTable)

@validation @LHV-128
Scenario Outline: Invalid field entries: paymentValueDate with value 2020-88-88  # src/test/resources/features/Validation.feature:68
  Given "paymentQueue" is "payment_provider_lhv.payment_submission"              # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  Given "paymentValueDate" is "2020-88-88"                                       # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"    # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.failedCount" is "1"      # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And the JSON message from the "payments_engine.payment_status_update" queue is # com.currencycloud.bdd.steps.AMQPSteps.assertMessage(java.lang.String,io.cucumber.datatable.DataTable)

@validation @LHV-129
Scenario Outline: Invalid field entries: paymentCurrency with value T            # src/test/resources/features/Validation.feature:73
  Given "paymentQueue" is "payment_provider_lhv.payment_submission"              # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  Given "paymentCurrency" is "T"                                                 # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"    # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.failedCount" is "1"      # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And the JSON message from the "payments_engine.payment_status_update" queue is # com.currencycloud.bdd.steps.AMQPSteps.assertMessage(java.lang.String,io.cucumber.datatable.DataTable)

@validation @LHV-129
Scenario Outline: Invalid field entries: paymentCurrency with value              # src/test/resources/features/Validation.feature:74
  Given "paymentQueue" is "payment_provider_lhv.payment_submission"              # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  Given "paymentCurrency" is ""                                                  # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"    # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.failedCount" is "1"      # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And the JSON message from the "payments_engine.payment_status_update" queue is # com.currencycloud.bdd.steps.AMQPSteps.assertMessage(java.lang.String,io.cucumber.datatable.DataTable)

@validation @LHV-129
Scenario Outline: Invalid field entries: paymentCurrency with value 111          # src/test/resources/features/Validation.feature:75
  Given "paymentQueue" is "payment_provider_lhv.payment_submission"              # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  Given "paymentCurrency" is "111"                                               # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"    # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.failedCount" is "1"      # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And the JSON message from the "payments_engine.payment_status_update" queue is # com.currencycloud.bdd.steps.AMQPSteps.assertMessage(java.lang.String,io.cucumber.datatable.DataTable)

@validation
Scenario Outline: Valid field entries: paymentCurrency with value GBP                            # src/test/resources/features/Validation.feature:88
  Given "paymentQueue" is "payment_provider_lhv.payment_submission"                              # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  Given "paymentCurrency" is "GBP"                                                               # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"                    # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.queuedForSubmissionCount" is "1"         # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And I send a HTTP POST request to "payment_submission/submit"                                  # com.currencycloud.bdd.steps.HTTPSteps.sendHTTPPostRequest(java.lang.String)
  And the response body is '{"status":"success","message":"1 batches of 1 have been submitted"}' # com.currencycloud.bdd.steps.HTTPSteps.assertResponseBody(java.lang.String)
  And the JSON message from the "payments_engine.payment_status_update" queue is                 # com.currencycloud.bdd.steps.AMQPSteps.assertMessage(java.lang.String,io.cucumber.datatable.DataTable)

@validation
Scenario Outline: Valid field entries: paymentProvCountryCode with value LPG                     # src/test/resources/features/Validation.feature:89
  Given "paymentQueue" is "payment_provider_lhv.payment_submission"                              # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  Given "paymentProvCountryCode" is "LPG"                                                        # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"                    # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.queuedForSubmissionCount" is "1"         # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And I send a HTTP POST request to "payment_submission/submit"                                  # com.currencycloud.bdd.steps.HTTPSteps.sendHTTPPostRequest(java.lang.String)
  And the response body is '{"status":"success","message":"1 batches of 1 have been submitted"}' # com.currencycloud.bdd.steps.HTTPSteps.assertResponseBody(java.lang.String)
  And the JSON message from the "payments_engine.payment_status_update" queue is                 # com.currencycloud.bdd.steps.AMQPSteps.assertMessage(java.lang.String,io.cucumber.datatable.DataTable)

@validation
Scenario Outline: Valid field entries: paymentProviderBicSwift with value BICSWIFTREGEXTEST      # src/test/resources/features/Validation.feature:90
  Given "paymentQueue" is "payment_provider_lhv.payment_submission"                              # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  Given "paymentProviderBicSwift" is "BICSWIFTREGEXTEST"                                         # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"                    # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.queuedForSubmissionCount" is "1"         # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And I send a HTTP POST request to "payment_submission/submit"                                  # com.currencycloud.bdd.steps.HTTPSteps.sendHTTPPostRequest(java.lang.String)
  And the response body is '{"status":"success","message":"1 batches of 1 have been submitted"}' # com.currencycloud.bdd.steps.HTTPSteps.assertResponseBody(java.lang.String)
  And the JSON message from the "payments_engine.payment_status_update" queue is                 # com.currencycloud.bdd.steps.AMQPSteps.assertMessage(java.lang.String,io.cucumber.datatable.DataTable)

@validation
Scenario Outline: Valid field entries: providerIban with value SL461050008610000090319           # src/test/resources/features/Validation.feature:91
  Given "paymentQueue" is "payment_provider_lhv.payment_submission"                              # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  Given "providerIban" is "SL461050008610000090319"                                              # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"                    # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.queuedForSubmissionCount" is "1"         # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And I send a HTTP POST request to "payment_submission/submit"                                  # com.currencycloud.bdd.steps.HTTPSteps.sendHTTPPostRequest(java.lang.String)
  And the response body is '{"status":"success","message":"1 batches of 1 have been submitted"}' # com.currencycloud.bdd.steps.HTTPSteps.assertResponseBody(java.lang.String)
  And the JSON message from the "payments_engine.payment_status_update" queue is                 # com.currencycloud.bdd.steps.AMQPSteps.assertMessage(java.lang.String,io.cucumber.datatable.DataTable)

@validation
Scenario Outline: Valid field entries: beneficiaryBankBicSwift with value INGBPLPW               # src/test/resources/features/Validation.feature:92
  Given "paymentQueue" is "payment_provider_lhv.payment_submission"                              # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  Given "beneficiaryBankBicSwift" is "INGBPLPW"                                                  # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"                    # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.queuedForSubmissionCount" is "1"         # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And I send a HTTP POST request to "payment_submission/submit"                                  # com.currencycloud.bdd.steps.HTTPSteps.sendHTTPPostRequest(java.lang.String)
  And the response body is '{"status":"success","message":"1 batches of 1 have been submitted"}' # com.currencycloud.bdd.steps.HTTPSteps.assertResponseBody(java.lang.String)
  And the JSON message from the "payments_engine.payment_status_update" queue is                 # com.currencycloud.bdd.steps.AMQPSteps.assertMessage(java.lang.String,io.cucumber.datatable.DataTable)

@validation
Scenario Outline: Valid field entries: bankIBAN with value PL46105000861000009031954168          # src/test/resources/features/Validation.feature:93
  Given "paymentQueue" is "payment_provider_lhv.payment_submission"                              # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  Given "bankIBAN" is "PL46105000861000009031954168"                                             # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"                    # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.queuedForSubmissionCount" is "1"         # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And I send a HTTP POST request to "payment_submission/submit"                                  # com.currencycloud.bdd.steps.HTTPSteps.sendHTTPPostRequest(java.lang.String)
  And the response body is '{"status":"success","message":"1 batches of 1 have been submitted"}' # com.currencycloud.bdd.steps.HTTPSteps.assertResponseBody(java.lang.String)
  And the JSON message from the "payments_engine.payment_status_update" queue is                 # com.currencycloud.bdd.steps.AMQPSteps.assertMessage(java.lang.String,io.cucumber.datatable.DataTable)

@validation
Scenario Outline: Valid field entries: beneficiaryName with value Beneficiary Name               # src/test/resources/features/Validation.feature:94
  Given "paymentQueue" is "payment_provider_lhv.payment_submission"                              # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  Given "beneficiaryName" is "Beneficiary Name"                                                  # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"                    # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.queuedForSubmissionCount" is "1"         # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And I send a HTTP POST request to "payment_submission/submit"                                  # com.currencycloud.bdd.steps.HTTPSteps.sendHTTPPostRequest(java.lang.String)
  And the response body is '{"status":"success","message":"1 batches of 1 have been submitted"}' # com.currencycloud.bdd.steps.HTTPSteps.assertResponseBody(java.lang.String)
  And the JSON message from the "payments_engine.payment_status_update" queue is                 # com.currencycloud.bdd.steps.AMQPSteps.assertMessage(java.lang.String,io.cucumber.datatable.DataTable)

@validation
Scenario Outline: Valid field entries: beneficiaryFirstName with value First Name                # src/test/resources/features/Validation.feature:95
  Given "paymentQueue" is "payment_provider_lhv.payment_submission"                              # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  Given "beneficiaryFirstName" is "First Name"                                                   # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"                    # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.queuedForSubmissionCount" is "1"         # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And I send a HTTP POST request to "payment_submission/submit"                                  # com.currencycloud.bdd.steps.HTTPSteps.sendHTTPPostRequest(java.lang.String)
  And the response body is '{"status":"success","message":"1 batches of 1 have been submitted"}' # com.currencycloud.bdd.steps.HTTPSteps.assertResponseBody(java.lang.String)
  And the JSON message from the "payments_engine.payment_status_update" queue is                 # com.currencycloud.bdd.steps.AMQPSteps.assertMessage(java.lang.String,io.cucumber.datatable.DataTable)

@validation
Scenario Outline: Valid field entries: beneficiaryLastName with value Last Name                  # src/test/resources/features/Validation.feature:96
  Given "paymentQueue" is "payment_provider_lhv.payment_submission"                              # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  Given "beneficiaryLastName" is "Last Name"                                                     # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"                    # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.queuedForSubmissionCount" is "1"         # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And I send a HTTP POST request to "payment_submission/submit"                                  # com.currencycloud.bdd.steps.HTTPSteps.sendHTTPPostRequest(java.lang.String)
  And the response body is '{"status":"success","message":"1 batches of 1 have been submitted"}' # com.currencycloud.bdd.steps.HTTPSteps.assertResponseBody(java.lang.String)
  And the JSON message from the "payments_engine.payment_status_update" queue is                 # com.currencycloud.bdd.steps.AMQPSteps.assertMessage(java.lang.String,io.cucumber.datatable.DataTable)

@validation
Scenario Outline: Valid field entries: companyName with value CORRECT COMPANY NAME FORMAT        # src/test/resources/features/Validation.feature:97
  Given "paymentQueue" is "payment_provider_lhv.payment_submission"                              # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  Given "companyName" is "CORRECT COMPANY NAME FORMAT"                                           # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"                    # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.queuedForSubmissionCount" is "1"         # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And I send a HTTP POST request to "payment_submission/submit"                                  # com.currencycloud.bdd.steps.HTTPSteps.sendHTTPPostRequest(java.lang.String)
  And the response body is '{"status":"success","message":"1 batches of 1 have been submitted"}' # com.currencycloud.bdd.steps.HTTPSteps.assertResponseBody(java.lang.String)
  And the JSON message from the "payments_engine.payment_status_update" queue is                 # com.currencycloud.bdd.steps.AMQPSteps.assertMessage(java.lang.String,io.cucumber.datatable.DataTable)

@validation
Scenario Outline: Valid field entries: beneficiaryBankCountryCode with value PLN                 # src/test/resources/features/Validation.feature:98
  Given "paymentQueue" is "payment_provider_lhv.payment_submission"                              # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  Given "beneficiaryBankCountryCode" is "PLN"                                                    # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"                    # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.queuedForSubmissionCount" is "1"         # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And I send a HTTP POST request to "payment_submission/submit"                                  # com.currencycloud.bdd.steps.HTTPSteps.sendHTTPPostRequest(java.lang.String)
  And the response body is '{"status":"success","message":"1 batches of 1 have been submitted"}' # com.currencycloud.bdd.steps.HTTPSteps.assertResponseBody(java.lang.String)
  And the JSON message from the "payments_engine.payment_status_update" queue is                 # com.currencycloud.bdd.steps.AMQPSteps.assertMessage(java.lang.String,io.cucumber.datatable.DataTable)

@validation
Scenario Outline: Valid field entries: paymentAmount with value 8.0000                           # src/test/resources/features/Validation.feature:99
  Given "paymentQueue" is "payment_provider_lhv.payment_submission"                              # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  Given "paymentAmount" is "8.0000"                                                              # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"                    # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.queuedForSubmissionCount" is "1"         # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And I send a HTTP POST request to "payment_submission/submit"                                  # com.currencycloud.bdd.steps.HTTPSteps.sendHTTPPostRequest(java.lang.String)
  And the response body is '{"status":"success","message":"1 batches of 1 have been submitted"}' # com.currencycloud.bdd.steps.HTTPSteps.assertResponseBody(java.lang.String)
  And the JSON message from the "payments_engine.payment_status_update" queue is                 # com.currencycloud.bdd.steps.AMQPSteps.assertMessage(java.lang.String,io.cucumber.datatable.DataTable)

@validation
Scenario Outline: Valid field entries: paymentAmount with value 1000000.00                       # src/test/resources/features/Validation.feature:100
  Given "paymentQueue" is "payment_provider_lhv.payment_submission"                              # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  Given "paymentAmount" is "1000000.00"                                                          # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"                    # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.queuedForSubmissionCount" is "1"         # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And I send a HTTP POST request to "payment_submission/submit"                                  # com.currencycloud.bdd.steps.HTTPSteps.sendHTTPPostRequest(java.lang.String)
  And the response body is '{"status":"success","message":"1 batches of 1 have been submitted"}' # com.currencycloud.bdd.steps.HTTPSteps.assertResponseBody(java.lang.String)
  And the JSON message from the "payments_engine.payment_status_update" queue is                 # com.currencycloud.bdd.steps.AMQPSteps.assertMessage(java.lang.String,io.cucumber.datatable.DataTable)

@validation
Scenario Outline: Valid field entries: paymentCurrency with value TTTT                           # src/test/resources/features/Validation.feature:101
  Given "paymentQueue" is "payment_provider_lhv.payment_submission"                              # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  Given "paymentCurrency" is "TTTT"                                                              # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"                    # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.queuedForSubmissionCount" is "1"         # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And I send a HTTP POST request to "payment_submission/submit"                                  # com.currencycloud.bdd.steps.HTTPSteps.sendHTTPPostRequest(java.lang.String)
  And the response body is '{"status":"success","message":"1 batches of 1 have been submitted"}' # com.currencycloud.bdd.steps.HTTPSteps.assertResponseBody(java.lang.String)
  And the JSON message from the "payments_engine.payment_status_update" queue is                 # com.currencycloud.bdd.steps.AMQPSteps.assertMessage(java.lang.String,io.cucumber.datatable.DataTable)

@validation @LHV-125
Scenario Outline: Valid field entries: paymentProviderBicSwift with value ctbaau25               # src/test/resources/features/Validation.feature:106
  Given "paymentQueue" is "payment_provider_lhv.payment_submission"                              # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  Given "paymentProviderBicSwift" is "ctbaau25"                                                  # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"                    # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.queuedForSubmissionCount" is "1"         # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And I send a HTTP POST request to "payment_submission/submit"                                  # com.currencycloud.bdd.steps.HTTPSteps.sendHTTPPostRequest(java.lang.String)
  And the response body is '{"status":"success","message":"1 batches of 1 have been submitted"}' # com.currencycloud.bdd.steps.HTTPSteps.assertResponseBody(java.lang.String)
  And the JSON message from the "payments_engine.payment_status_update" queue is                 # com.currencycloud.bdd.steps.AMQPSteps.assertMessage(java.lang.String,io.cucumber.datatable.DataTable)

@validation @LHV-125
Scenario Outline: Valid field entries: paymentProviderBicSwift with value ctbaau25abc            # src/test/resources/features/Validation.feature:107
  Given "paymentQueue" is "payment_provider_lhv.payment_submission"                              # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  Given "paymentProviderBicSwift" is "ctbaau25abc"                                               # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"                    # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.queuedForSubmissionCount" is "1"         # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And I send a HTTP POST request to "payment_submission/submit"                                  # com.currencycloud.bdd.steps.HTTPSteps.sendHTTPPostRequest(java.lang.String)
  And the response body is '{"status":"success","message":"1 batches of 1 have been submitted"}' # com.currencycloud.bdd.steps.HTTPSteps.assertResponseBody(java.lang.String)
  And the JSON message from the "payments_engine.payment_status_update" queue is                 # com.currencycloud.bdd.steps.AMQPSteps.assertMessage(java.lang.String,io.cucumber.datatable.DataTable)

@validation @LHV-127
Scenario Outline: Valid field entries: beneficiaryBankBicSwift with value ctbaau25               # src/test/resources/features/Validation.feature:111
  Given "paymentQueue" is "payment_provider_lhv.payment_submission"                              # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  Given "beneficiaryBankBicSwift" is "ctbaau25"                                                  # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"                    # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.queuedForSubmissionCount" is "1"         # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And I send a HTTP POST request to "payment_submission/submit"                                  # com.currencycloud.bdd.steps.HTTPSteps.sendHTTPPostRequest(java.lang.String)
  And the response body is '{"status":"success","message":"1 batches of 1 have been submitted"}' # com.currencycloud.bdd.steps.HTTPSteps.assertResponseBody(java.lang.String)
  And the JSON message from the "payments_engine.payment_status_update" queue is                 # com.currencycloud.bdd.steps.AMQPSteps.assertMessage(java.lang.String,io.cucumber.datatable.DataTable)

@validation @LHV-127
Scenario Outline: Valid field entries: beneficiaryBankBicSwift with value ctbaau25abc            # src/test/resources/features/Validation.feature:112
  Given "paymentQueue" is "payment_provider_lhv.payment_submission"                              # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  Given "beneficiaryBankBicSwift" is "ctbaau25abc"                                               # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"                    # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
  And I wait until "payment_submission" returns JSON "$.queuedForSubmissionCount" is "1"         # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And I send a HTTP POST request to "payment_submission/submit"                                  # com.currencycloud.bdd.steps.HTTPSteps.sendHTTPPostRequest(java.lang.String)
  And the response body is '{"status":"success","message":"1 batches of 1 have been submitted"}' # com.currencycloud.bdd.steps.HTTPSteps.assertResponseBody(java.lang.String)
  And the JSON message from the "payments_engine.payment_status_update" queue is                 # com.currencycloud.bdd.steps.AMQPSteps.assertMessage(java.lang.String,io.cucumber.datatable.DataTable)
Aug 06, 2020 10:21:38 AM net.masterthought.cucumber.ReportParser parseJsonFiles
INFO: File '/tmp/cucumber3714098852158958993.json' contains 9 features

93 Scenarios (93 passed)
667 Steps (667 passed)
5m4.787s


[Server@1753475d]: Initiating shutdown sequence...
[Server@1753475d]: Shutdown sequence completed in 2 ms.
[Server@1753475d]: 2020-08-06 10:21:48.004 SHUTDOWN : System.exit() was not called
[INFO] Tests run: 93, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 319.311 s - in com.currencycloud.providers.lhv.bdd.LHVBDDTests
[INFO] 
[INFO] Results:
[INFO] 
[INFO] Tests run: 93, Failures: 0, Errors: 0, Skipped: 0
[INFO] 
[INFO] 
[INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ bdd ---
[WARNING] JAR will be empty - no content was marked for inclusion!
[INFO] Building jar: /home/jenkins/agent/workspace/loud_payment-provider-lhv_PR-127/bdd/target/bdd-1.0.0-SNAPSHOT.jar
[INFO] 
[INFO] --- maven-install-plugin:2.4:install (default-install) @ bdd ---
[INFO] Installing /home/jenkins/agent/workspace/loud_payment-provider-lhv_PR-127/bdd/target/bdd-1.0.0-SNAPSHOT.jar to /root/.mvnrepository/com/currencycloud/providers/lhv/bdd/1.0.0-SNAPSHOT/bdd-1.0.0-SNAPSHOT.jar
[INFO] Installing /home/jenkins/agent/workspace/loud_payment-provider-lhv_PR-127/bdd/pom.xml to /root/.mvnrepository/com/currencycloud/providers/lhv/bdd/1.0.0-SNAPSHOT/bdd-1.0.0-SNAPSHOT.pom
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Summary:
[INFO] 
[INFO] Payment Provider LHV 1.0.0-SNAPSHOT ................ SUCCESS [  1.732 s]
[INFO] LHV Provider ....................................... SUCCESS [01:44 min]
[INFO] wiremock ........................................... SUCCESS [  3.590 s]
[INFO] Behaviour Driven Design Tests 1.0.0-SNAPSHOT ....... SUCCESS [05:33 min]
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 07:26 min
[INFO] Finished at: 2020-08-06T10:21:48Z
[INFO] ------------------------------------------------------------------------
[Pipeline] sh
+ skaffold version
v0.31.0
[Pipeline] sh
+ export VERSION=0.0.0-SNAPSHOT-PR-127-1
+ VERSION=0.0.0-SNAPSHOT-PR-127-1
+ skaffold build -f skaffold.yaml
time="2020-08-06T10:21:51Z" level=warning msg="config version (skaffold/v1beta10) out of date: upgrading to latest (skaffold/v1beta11)"
Generating tags...
 - ccycloud/payment-provider-lhv -> 570953794266.dkr.ecr.eu-west-1.amazonaws.com/ccycloud/payment-provider-lhv:0.0.0-SNAPSHOT-PR-127-1
Tags generated in 170.784µs
Starting build...
Building [ccycloud/payment-provider-lhv]...
time="2020-08-06T10:21:52Z" level=warning msg="Error processing base image (adoptopenjdk/openjdk11:alpine-jre) for ONBUILD triggers: getting remote config: getting image: Get https://auth.docker.io/token?scope=repository%3Aadoptopenjdk%2Fopenjdk11%3Apull&service=registry.docker.io: invoking docker-credential-ecr-login: exit status 1; output: 2020-08-06T10:21:52Z [ERROR] Error parsing the serverURL: https://index.docker.io, error: docker-credential-ecr-login can only be used with Amazon Elastic Container Registry.\ncredentials not found in native keychain. Dependencies may be incomplete."
Sending build context to Docker daemon  525.8kB
Sending build context to Docker daemon  14.45MB
Sending build context to Docker daemon  27.26MB
Sending build context to Docker daemon  40.63MB
Sending build context to Docker daemon  54.56MB
Sending build context to Docker daemon  69.04MB
Sending build context to Docker daemon  69.79MB

Step 1/9 : FROM adoptopenjdk/openjdk11:alpine-jre
alpine-jre: Pulling from adoptopenjdk/openjdk11
df20fa9351a1: Already exists
ffa7158a1780: Already exists
dce2455ca101: Already exists
Digest: sha256:3706d705804e2149a9c876ed7aa432f3cb6dfb06061d237f948a185158c71a4c
Status: Downloaded newer image for adoptopenjdk/openjdk11:alpine-jre
 ---> a7b99112d065
Step 2/9 : ENV PORT 8080
 ---> Running in 6431e73d6dbf
Removing intermediate container 6431e73d6dbf
 ---> 33794bc0cb4f
Step 3/9 : EXPOSE 8080
 ---> Running in 1706d76404df
Removing intermediate container 1706d76404df
 ---> ba249514eb50
Step 4/9 : RUN apk add curl && rm -rf /var/cache/apk/*
 ---> Running in d14438061283
fetch http://dl-cdn.alpinelinux.org/alpine/v3.12/main/x86_64/APKINDEX.tar.gz
fetch http://dl-cdn.alpinelinux.org/alpine/v3.12/community/x86_64/APKINDEX.tar.gz
(1/4) Installing ca-certificates (20191127-r4)
(2/4) Installing nghttp2-libs (1.41.0-r0)
(3/4) Installing libcurl (7.69.1-r0)
(4/4) Installing curl (7.69.1-r0)
Executing busybox-1.31.1-r16.trigger
Executing ca-certificates-20191127-r4.trigger
Executing glibc-bin-2.31-r0.trigger
[91m/usr/glibc-compat/sbin/ldconfig: /usr/glibc-compat/lib/ld-linux-x86-64.so.2 is not a symbolic link

[0mOK: 18 MiB in 21 packages
Removing intermediate container d14438061283
 ---> 6a1ab8f3b0bc
Step 5/9 : RUN curl -sLo dd-java-agent.jar 'https://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.datadoghq&a=dd-java-agent&v=LATEST'
 ---> Running in d06a655675a1
Removing intermediate container d06a655675a1
 ---> dbc44b5c9d91
Step 6/9 : COPY entrypoint.sh /
 ---> 69ef9e848d30
Step 7/9 : RUN chmod +x /entrypoint.sh
 ---> Running in 92dca2f62a8a
Removing intermediate container 92dca2f62a8a
 ---> e9d224d61156
Step 8/9 : COPY application/target/app.jar /opt/app.jar
 ---> b5dc32c91577
Step 9/9 : ENTRYPOINT ["/bin/sh", "-c", "/entrypoint.sh"]
 ---> Running in f04b59c97290
Removing intermediate container f04b59c97290
 ---> a88dc0877b98
Successfully built a88dc0877b98
Successfully tagged 570953794266.dkr.ecr.eu-west-1.amazonaws.com/ccycloud/payment-provider-lhv:0.0.0-SNAPSHOT-PR-127-1
The push refers to repository [570953794266.dkr.ecr.eu-west-1.amazonaws.com/ccycloud/payment-provider-lhv]
461a7fd5a8f0: Preparing
81a132ac5651: Preparing
e2a9a6de3f49: Preparing
a4f12629f20d: Preparing
025661c41e7d: Preparing
c2ac4178ebdc: Preparing
23619cbdaa4c: Preparing
50644c29ef5a: Preparing
23619cbdaa4c: Waiting
c2ac4178ebdc: Waiting
50644c29ef5a: Waiting
e2a9a6de3f49: Pushed
c2ac4178ebdc: Layer already exists
81a132ac5651: Pushed
23619cbdaa4c: Layer already exists
50644c29ef5a: Layer already exists
025661c41e7d: Pushed
a4f12629f20d: Pushed
461a7fd5a8f0: Pushed
0.0.0-SNAPSHOT-PR-127-1: digest: sha256:0d7cf8c6bd98c7d445c89dc18bc902a64302ecf2a6905493190c0e887337eb5f size: 1999
Build complete in 14.887111315s
Starting test...
Test complete in 4.8µs
Complete in 14.892442387s
There is a new version (1.13.1) of Skaffold available. Download it at https://storage.googleapis.com/skaffold/releases/latest/skaffold-linux-amd64

[Pipeline] }
[Pipeline] // container
[Pipeline] }
[Pipeline] // withEnv
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Build Release)
Stage "Build Release" skipped due to when conditional
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (preview)
[Pipeline] withEnv
[Pipeline] {
[Pipeline] lock
Trying to acquire lock on [payment-provider-lhv-pr-127]
Resource [payment-provider-lhv-pr-127] did not exist. Created.
Lock acquired on [payment-provider-lhv-pr-127]
[Pipeline] {
[Pipeline] container
[Pipeline] {
[Pipeline] dir
Running in /home/jenkins/agent/workspace/loud_payment-provider-lhv_PR-127/charts/preview
[Pipeline] {
[Pipeline] sh
+ make preview
sed -i -e "s/version:.*/version: 0.0.0-SNAPSHOT-PR-127-1/" Chart.yaml
sed -i -e "s/version:.*/version: 0.0.0-SNAPSHOT-PR-127-1/" ../*/Chart.yaml
sed -i -e "s|repository:.*|repository: 570953794266.dkr.ecr.eu-west-1.amazonaws.com\/ccycloud\/payment-provider-lhv|" values.yaml
sed -i -e "s/tag:.*/tag: 0.0.0-SNAPSHOT-PR-127-1/" values.yaml
echo "  version: 0.0.0-SNAPSHOT-PR-127-1" >> requirements.yaml
jx step helm build
WARNING: No $CHART_REPOSITORY defined so using the default value of: http://jenkins-x-chartmuseum:8080
Adding missing Helm repo: storage.googleapis.com https://storage.googleapis.com/chartmuseum.jenkins-x.io
Successfully added Helm repository storage.googleapis.com.
Adding missing Helm repo: jenkins-x-chartmuseum http://jenkins-x-chartmuseum:8080
Successfully added Helm repository jenkins-x-chartmuseum.
WARNING: No $CHART_REPOSITORY defined so using the default value of: http://jenkins-x-chartmuseum:8080
Adding missing Helm repo: chartmuseum.jenkins-x.io http://chartmuseum.jenkins-x.io
Successfully added Helm repository chartmuseum.jenkins-x.io.
Adding missing Helm repo: kubernetes-charts.storage.googleapis.com https://kubernetes-charts.storage.googleapis.com/
Successfully added Helm repository kubernetes-charts.storage.googleapis.com.
[Pipeline] sh
+ kubectl create namespace payment-provider-lhv-pr-127 --dry-run -o yaml
+ kubectl apply -f -
namespace/payment-provider-lhv-pr-127 created
[Pipeline] sh
+ kubectl get secrets -n secrets-template -o yaml
+ sed -e 's/ \(namespace\|resourceVersion\|selfLink\|uid\):.*/ /'
+ kubectl apply -n payment-provider-lhv-pr-127 -f -
secret/apply-financial created
secret/aws-credentials created
secret/collections-provider-cfsb created
secret/collections-provider-swift created
secret/comply-advantage created
secret/crm created
secret/database-passwords created
secret/database-urls created
secret/default-token-nlfmx created
secret/fix-adapter-360t created
secret/fix-adapter-deutsche created
secret/jwt-secret created
secret/market-rates created
secret/market-simulator-deutsche created
secret/offline-trading created
secret/payment-confirmations created
secret/payment-provider-dbs created
secret/payment-provider-erste created
secret/payment-provider-ing created
secret/payment-provider-lhv created
secret/payment-provider-trustly created
secret/payment-tracking created
secret/payments-ms created
secret/rabbitmq-credentials created
secret/rails-secrets created
secret/rates-batching created
secret/rundeck created
secret/secret-key-base created
secret/service-accounts created
secret/service-sca created
secret/trading created
secret/virtual-accounts created
secret/web-trust created
secret/white-label created
[Pipeline] sh
+ jx preview --namespace payment-provider-lhv-pr-127 --app payment-provider-lhv --dir ../..
Creating a preview
Commit author email is empty for: 6b8b8c4a3704a6dc8ef79872ef127fc2c83df8e9
Looking for commits in: /home/jenkins/agent/workspace/loud_payment-provider-lhv_PR-127/
Found commit author match for: ryh-cc with email address: robel.yemane@currencycloud.com
Created environment ccycloud-payment-provider-lhv-pr-127
expose:
  Annotations:
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-delete-policy: hook-succeeded
  config:
    domain: nonprod.ccycloud.io
    exposer: Ingress
    http: "true"
preview:
  image:
    repository: 570953794266.dkr.ecr.eu-west-1.amazonaws.com/ccycloud/payment-provider-lhv
    tag: 0.0.0-SNAPSHOT-PR-127-1
Deleting and cloning the Jenkins X versions repo
Cloning the Jenkins X versions repo https://github.com/jenkins-x/jenkins-x-versions.git with ref refs/heads/master to /root/.jx/jenkins-x-versions


Updating PipelineActivities ccycloud-payment-provider-lhv-pr-127-1 which has status Running
WARNING: preview application http://payment-provider-lhv.payment-provider-lhv-pr-127.nonprod.ccycloud.io not available, error was 503 503 Service Temporarily Unavailable, delaying for: 1.023820306s
WARNING: preview application http://payment-provider-lhv.payment-provider-lhv-pr-127.nonprod.ccycloud.io not available, error was 503 503 Service Temporarily Unavailable, delaying for: 1.561649783s
WARNING: preview application http://payment-provider-lhv.payment-provider-lhv-pr-127.nonprod.ccycloud.io not available, error was 503 503 Service Temporarily Unavailable, delaying for: 3.137313891s
WARNING: preview application http://payment-provider-lhv.payment-provider-lhv-pr-127.nonprod.ccycloud.io not available, error was 503 503 Service Temporarily Unavailable, delaying for: 4.152031236s
WARNING: preview application http://payment-provider-lhv.payment-provider-lhv-pr-127.nonprod.ccycloud.io not available, error was 503 503 Service Temporarily Unavailable, delaying for: 4.292766941s
WARNING: preview application http://payment-provider-lhv.payment-provider-lhv-pr-127.nonprod.ccycloud.io not available, error was 503 503 Service Temporarily Unavailable, delaying for: 6.242700151s
WARNING: preview application http://payment-provider-lhv.payment-provider-lhv-pr-127.nonprod.ccycloud.io not available, error was 503 503 Service Temporarily Unavailable, delaying for: 12.849743232s
WARNING: preview application http://payment-provider-lhv.payment-provider-lhv-pr-127.nonprod.ccycloud.io not available, error was 503 503 Service Temporarily Unavailable, delaying for: 21.119390871s
WARNING: preview application http://payment-provider-lhv.payment-provider-lhv-pr-127.nonprod.ccycloud.io not available, error was 503 503 Service Temporarily Unavailable, delaying for: 33.712395807s
WARNING: preview application http://payment-provider-lhv.payment-provider-lhv-pr-127.nonprod.ccycloud.io not available, error was 503 503 Service Temporarily Unavailable, delaying for: 50.529742084s
Preview application is now available at: http://payment-provider-lhv.payment-provider-lhv-pr-127.nonprod.ccycloud.io
[Pipeline] }
[Pipeline] // dir
[Pipeline] dir
Running in /home/jenkins/agent/workspace/loud_payment-provider-lhv_PR-127/bdd
[Pipeline] {
[Pipeline] sh
+ ./k8-start-ports.sh payment-provider-lhv-pr-127
[Pipeline] sh
+ mvn clean install -P local -Dtags=@smoke
Picked up _JAVA_OPTIONS: -XX:+UnlockExperimentalVMOptions -Dsun.zip.disableMemoryMapping=true -XX:+UseParallelGC -XX:MinHeapFreeRatio=5 -XX:MaxHeapFreeRatio=10 -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90 -Xms10m -Xmx192m
[INFO] Scanning for projects...
[WARNING] 
[WARNING] Some problems were encountered while building the effective model for com.currencycloud.providers.lhv:bdd:jar:1.0.0-SNAPSHOT
[WARNING] The expression ${build.directory} is deprecated. Please use ${project.build.directory} instead.
[WARNING] 
[WARNING] It is highly recommended to fix these problems because they threaten the stability of your build.
[WARNING] 
[WARNING] For this reason, future Maven versions might no longer support building such malformed projects.
[WARNING] 
[INFO] 
[INFO] ----------------< com.currencycloud.providers.lhv:bdd >-----------------
[INFO] Building Behaviour Driven Design Tests 1.0.0-SNAPSHOT
[INFO] --------------------------------[ jar ]---------------------------------
[INFO] 
[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ bdd ---
[INFO] Deleting /home/jenkins/agent/workspace/loud_payment-provider-lhv_PR-127/bdd/target
[INFO] 
[INFO] --- maven-dependency-plugin:2.2:unpack-dependencies (unpack) @ bdd ---
[INFO] Unpacking /root/.mvnrepository/com/currencycloud/providers/lhv/wiremock/1.0.0-SNAPSHOT/wiremock-1.0.0-SNAPSHOT.jar to /home/jenkins/agent/workspace/loud_payment-provider-lhv_PR-127/bdd/target with includes pki/**,,wiremock/** and excludes 
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ bdd ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /home/jenkins/agent/workspace/loud_payment-provider-lhv_PR-127/bdd/src/main/resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.1:compile (default-compile) @ bdd ---
[INFO] No sources to compile
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ bdd ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 15 resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.1:testCompile (default-testCompile) @ bdd ---
[INFO] Changes detected - recompiling the module!
[INFO] Compiling 2 source files to /home/jenkins/agent/workspace/loud_payment-provider-lhv_PR-127/bdd/target/test-classes
[INFO] 
[INFO] --- maven-surefire-plugin:3.0.0-M4:test (default-test) @ bdd ---
[INFO] 
[INFO] -------------------------------------------------------
[INFO]  T E S T S
[INFO] -------------------------------------------------------
[INFO] Running com.currencycloud.providers.lhv.bdd.LHVBDDTests
[Broker] BRK-1006 : Using configuration : N/A
[Broker] BRK-1001 : Startup : Version: 8.0.0 Build: 08ef221bfb23d63890db4f646722a97e6e1976b2
[Broker] BRK-1010 : Platform : JVM : Oracle Corporation version: 11.0.2+9 OS : Linux version: 4.14.177-139.253.amzn2.x86_64 arch: amd64 cores: 1
[Broker] BRK-1011 : Maximum Memory : Heap : 179,306,496 bytes Direct : 179,306,496 bytes
[Broker] BRK-1017 : Process : PID : 1629
[Broker] BRK-1002 : Starting : Listening on TCP port 50350
[Broker] BRK-1004 : Qpid Broker Ready
[Server@50a7c72b]: [Thread[main,5,main]]: checkRunning(false) entered
[Server@50a7c72b]: [Thread[main,5,main]]: checkRunning(false) exited
[Server@50a7c72b]: [Thread[main,5,main]]: setDatabaseName(0,test_database)
[Server@50a7c72b]: [Thread[main,5,main]]: checkRunning(false) entered
[Server@50a7c72b]: [Thread[main,5,main]]: checkRunning(false) exited
[Server@50a7c72b]: [Thread[main,5,main]]: setDatabasePath(0,jdbc:h2:file:./target/database;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE)
[Server@50a7c72b]: [Thread[main,5,main]]: checkRunning(false) entered
[Server@50a7c72b]: [Thread[main,5,main]]: checkRunning(false) exited
[Server@50a7c72b]: [Thread[main,5,main]]: setPort(26720)
[Server@50a7c72b]: [Thread[main,5,main]]: checkRunning(false) entered
[Server@50a7c72b]: [Thread[main,5,main]]: checkRunning(false) exited
[Server@50a7c72b]: [Thread[main,5,main]]: setDaemon(true)
[Server@50a7c72b]: Initiating startup sequence...
[Server@50a7c72b]: Server socket opened successfully in 1 ms.
[Server@50a7c72b]: Database [index=0, id=0, db=file:jdbc:h2:file:./target/database, alias=test_database] opened successfully in 890 ms.
[Server@50a7c72b]: Startup sequence completed in 893 ms.
[Server@50a7c72b]: 2020-08-06 10:27:00.871 HSQLDB server 2.5.1 is online on port 26720
[Server@50a7c72b]: To close normally, connect and execute SHUTDOWN SQL
[Server@50a7c72b]: From command line, use [Ctrl]+[C] to abort abruptly
Aug 06, 2020 10:27:06 AM org.apache.coyote.AbstractProtocol init
INFO: Initializing ProtocolHandler ["http-nio-53533"]
Aug 06, 2020 10:27:06 AM org.apache.catalina.core.StandardService startInternal
INFO: Starting service [Tomcat]
Aug 06, 2020 10:27:06 AM org.apache.catalina.core.StandardEngine startInternal
INFO: Starting Servlet engine: [Apache Tomcat/9.0.36]
Aug 06, 2020 10:27:07 AM org.apache.catalina.core.ApplicationContext log
INFO: Initializing Spring embedded WebApplicationContext
Aug 06, 2020 10:27:18 AM org.apache.coyote.AbstractProtocol start
INFO: Starting ProtocolHandler ["http-nio-53533"]

@submit @LHV-114 @smoke
Scenario: One payment submission                                                                                        # src/test/resources/features/Submit.feature:17
  Given the XML namespace "urn:iso:std:iso:20022:tech:xsd:pain.001.001.03"                                              # com.currencycloud.bdd.steps.WireMockSteps.setDefaultNamespace(java.lang.String)
  And "paymentQueue" is "payment_provider_lhv.payment_submission"                                                       # com.currencycloud.bdd.steps.VariableSteps.createVariable(java.lang.String,java.lang.String)
  And "paymentShortReference" starts at 1 with the format "%06d"                                                        # com.currencycloud.bdd.steps.VariableSteps.createIncementor(java.lang.String,int,java.lang.String)
  When I put the message from file "payment.json" on the queue "paymentQueue"                                           # com.currencycloud.bdd.steps.AMQPSteps.sendAMQPMessageFromFile(java.lang.String,java.lang.String)
Aug 06, 2020 10:27:21 AM org.apache.catalina.core.ApplicationContext log
INFO: Initializing Spring DispatcherServlet 'dispatcherServlet'
  And I wait until "payment_submission" returns JSON "$.queuedForSubmissionCount" is "1"                                # com.currencycloud.bdd.steps.HTTPSteps.waitUntilJSONIs(java.lang.String,java.lang.String,java.lang.String)
  And I send a HTTP POST request to "payment_submission/submit"                                                         # com.currencycloud.bdd.steps.HTTPSteps.sendHTTPPostRequest(java.lang.String)
  Then the status code is 200                                                                                           # com.currencycloud.bdd.steps.HTTPSteps.assertStatusCode(int)
  And the response header Content-Type is application/json                                                              # com.currencycloud.bdd.steps.HTTPSteps.assertHeader(java.lang.String,java.lang.String)
  And the response body is '{"status":"success","message":"1 batches of 1 have been submitted"}'                        # com.currencycloud.bdd.steps.HTTPSteps.assertResponseBody(java.lang.String)
  And "/payment" is called on the LHV Service                                                                           # com.currencycloud.bdd.steps.WireMockSteps.assertURI(java.lang.String)
  And the XML request "/Document/CstmrCdtTrfInitn/PmtInf/ReqdExctnDt " matches "\d{4}-\d{2}-\d{2}"                      # com.currencycloud.bdd.steps.WireMockSteps.assertXPathMatches(java.lang.String,java.lang.String)
  And the XML request "/Document/CstmrCdtTrfInitn/GrpHdr/MsgId" matches "LHV_\d{6}_\d{6}\.xml"                          # com.currencycloud.bdd.steps.WireMockSteps.assertXPathMatches(java.lang.String,java.lang.String)
  And the XML request "/Document/CstmrCdtTrfInitn/GrpHdr/CreDtTm" matches "\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}Z" # com.currencycloud.bdd.steps.WireMockSteps.assertXPathMatches(java.lang.String,java.lang.String)
  And the XML request has                                                                                               # com.currencycloud.bdd.steps.WireMockSteps.assertXPath(io.cucumber.datatable.DataTable)
  And the JSON message from the "payments_engine.payment_status_update" queue is                                        # com.currencycloud.bdd.steps.AMQPSteps.assertMessage(java.lang.String,io.cucumber.datatable.DataTable)
Aug 06, 2020 10:27:26 AM net.masterthought.cucumber.ReportParser parseJsonFiles
INFO: File '/tmp/cucumber4966545349174274285.json' contains 1 features

1 Scenarios (1 passed)
15 Steps (15 passed)
0m32.891s


[Server@50a7c72b]: Initiating shutdown sequence...
[Server@50a7c72b]: Shutdown sequence completed in 2 ms.
[Server@50a7c72b]: 2020-08-06 10:27:29.078 SHUTDOWN : System.exit() was not called
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 37.504 s - in com.currencycloud.providers.lhv.bdd.LHVBDDTests
[INFO] 
[INFO] Results:
[INFO] 
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0
[INFO] 
[INFO] 
[INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ bdd ---
[WARNING] JAR will be empty - no content was marked for inclusion!
[INFO] Building jar: /home/jenkins/agent/workspace/loud_payment-provider-lhv_PR-127/bdd/target/bdd-1.0.0-SNAPSHOT.jar
[INFO] 
[INFO] --- maven-install-plugin:2.4:install (default-install) @ bdd ---
[INFO] Installing /home/jenkins/agent/workspace/loud_payment-provider-lhv_PR-127/bdd/target/bdd-1.0.0-SNAPSHOT.jar to /root/.mvnrepository/com/currencycloud/providers/lhv/bdd/1.0.0-SNAPSHOT/bdd-1.0.0-SNAPSHOT.jar
[INFO] Installing /home/jenkins/agent/workspace/loud_payment-provider-lhv_PR-127/bdd/pom.xml to /root/.mvnrepository/com/currencycloud/providers/lhv/bdd/1.0.0-SNAPSHOT/bdd-1.0.0-SNAPSHOT.pom
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 55.495 s
[INFO] Finished at: 2020-08-06T10:27:30Z
[INFO] ------------------------------------------------------------------------
[Pipeline] sh
+ ./k8-stop-ports.sh
./k8-stop-ports.sh: line 3: kill: (-1446) - No such process
[Pipeline] }
[Pipeline] // dir
[Pipeline] }
[Pipeline] // container
[Pipeline] }
Lock released on resource [payment-provider-lhv-pr-127]
[Pipeline] // lock
[Pipeline] }
[Pipeline] // withEnv
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Release and promote to environments)
Stage "Release and promote to environments" skipped due to when conditional
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Declarative: Post Actions)
[Pipeline] cleanWs
[WS-CLEANUP] Deleting project workspace...
[WS-CLEANUP] Deferred wipeout is used...
[WS-CLEANUP] done
[Pipeline] }
[Pipeline] // stage
[Pipeline] }
[Pipeline] // withEnv
[Pipeline] }
[Pipeline] // withCredentials
[Pipeline] }
[Pipeline] // withEnv
[Pipeline] }
[Pipeline] // node
[Pipeline] End of Pipeline

GitHub has been notified of this commit’s build result

Finished: SUCCESS
